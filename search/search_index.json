{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Coding Challenge Note \u00b6 Python3\u3067\u52d5\u4f5c\u3057\u307e\u3059\u3002 \u8aa4\u308a\u304c\u3042\u308c\u3070\u3001 Issue \u3092\u3044\u305f\u3060\u3051\u308b\u3068\u52a9\u304b\u308a\u307e\u3059\u3002","title":"Coding Challenge Note"},{"location":"#coding-challenge-note","text":"Python3\u3067\u52d5\u4f5c\u3057\u307e\u3059\u3002 \u8aa4\u308a\u304c\u3042\u308c\u3070\u3001 Issue \u3092\u3044\u305f\u3060\u3051\u308b\u3068\u52a9\u304b\u308a\u307e\u3059\u3002","title":"Coding Challenge Note"},{"location":"problems/","text":"Problems \u00b6 AtCoder \u00b6 400 \u00b6 ABC054 D - Mixing Experiment LeetCode \u00b6 Medium \u00b6 LeetCode 1310. XOR Queries of a Subarray Hard \u00b6 LeetCode 1312. Minimum Insertion Steps to Make a String Palindrome \u52d5\u7684\u8a08\u753b\u6cd5 \u00b6 ABC054 D - Mixing Experiment LeetCode 1312. Minimum Insertion Steps to Make a String Palindrome Bit\u64cd\u4f5c \u00b6 LeetCode 1310. XOR Queries of a Subarray","title":"Problems"},{"location":"problems/#problems","text":"","title":"Problems"},{"location":"problems/#atcoder","text":"","title":"AtCoder"},{"location":"problems/#400","text":"ABC054 D - Mixing Experiment","title":"400"},{"location":"problems/#leetcode","text":"","title":"LeetCode"},{"location":"problems/#medium","text":"LeetCode 1310. XOR Queries of a Subarray","title":"Medium"},{"location":"problems/#hard","text":"LeetCode 1312. Minimum Insertion Steps to Make a String Palindrome","title":"Hard"},{"location":"problems/#_1","text":"ABC054 D - Mixing Experiment LeetCode 1312. Minimum Insertion Steps to Make a String Palindrome","title":"\u52d5\u7684\u8a08\u753b\u6cd5"},{"location":"problems/#bit","text":"LeetCode 1310. XOR Queries of a Subarray","title":"Bit\u64cd\u4f5c"},{"location":"algorithms/bfs/","text":"\u5e45\u512a\u5148\u63a2\u7d22\uff08BFS\uff09 \u00b6 \u8a08\u7b97\u91cf \u00b6 O(N+M) N\u306f\u30b0\u30e9\u30d5\u306e\u9802\u70b9\u306e\u6570 M\u306f\u8fba\u306e\u6570 \u30b3\u30fc\u30c9 \u00b6 Args: graph (List[int]): \u96a3\u63a5\u30ea\u30b9\u30c8 start (int): \u958b\u59cb\u30ce\u30fc\u30c9\u756a\u53f7 Returns: list: \u958b\u59cb\u30ce\u30fc\u30c9\u304b\u3089\u306e\u8ddd\u96e2 from collections import deque def bfs ( graph , start ): que = deque ([ start ]) dist = [ None ] * len ( graph ) dist [ start ] = 0 while len ( que ) != 0 : v = que . popleft () # do something with v for u in graph [ v ]: if dist [ u ] is None : que . append ( u ) dist [ u ] = dist [ v ] + 1 return dist","title":"\u5e45\u512a\u5148\u63a2\u7d22\uff08BFS\uff09"},{"location":"algorithms/bfs/#bfs","text":"","title":"\u5e45\u512a\u5148\u63a2\u7d22\uff08BFS\uff09"},{"location":"algorithms/bfs/#_1","text":"O(N+M) N\u306f\u30b0\u30e9\u30d5\u306e\u9802\u70b9\u306e\u6570 M\u306f\u8fba\u306e\u6570","title":"\u8a08\u7b97\u91cf"},{"location":"algorithms/bfs/#_2","text":"Args: graph (List[int]): \u96a3\u63a5\u30ea\u30b9\u30c8 start (int): \u958b\u59cb\u30ce\u30fc\u30c9\u756a\u53f7 Returns: list: \u958b\u59cb\u30ce\u30fc\u30c9\u304b\u3089\u306e\u8ddd\u96e2 from collections import deque def bfs ( graph , start ): que = deque ([ start ]) dist = [ None ] * len ( graph ) dist [ start ] = 0 while len ( que ) != 0 : v = que . popleft () # do something with v for u in graph [ v ]: if dist [ u ] is None : que . append ( u ) dist [ u ] = dist [ v ] + 1 return dist","title":"\u30b3\u30fc\u30c9"},{"location":"algorithms/binary_search/","text":"\u4e8c\u5206\u63a2\u7d22 \u00b6 \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea \u00b6 from bisect import bisect_left from bisect import bisect_right bisect_right \u306f bisect \u306e\u30a8\u30a4\u30ea\u30a2\u30b9\u3067\u3042\u308b\u3002 Note \u30bd\u30fc\u30c8\u3055\u308c\u305f\u30ea\u30b9\u30c8\u306b\u5bfe\u3057\u3066\u7528\u3044\u308b\u3053\u3068 x \u3068\u7b49\u3057\u3044\u5024\u306e\u63a2\u7d22 \u00b6 i = bisect_left ( A , x ) if i != len ( A ) and A [ i ] == x : # \u7b49\u3057\u3044\u5024\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 print ( i ) else : # \u7b49\u3057\u3044\u5024\u306f\u306a\u3044 pass Example \u00b6 >>> def f ( A , x ): ... i = bisect_left ( A , x ) ... if i != len ( A ) and A [ i ] == x : ... return i ... else : ... return \"Not Found\" ... >>> A = [ 2 , 4 , 5 , 7 ] >>> f ( A , 4 ) 1 >>> f ( A , 1 ) 'Not Found' x \u4ee5\u4e0a\u306e\u5024\u304c\u4f55\u500b\u3042\u308b\u304b \u00b6 n = len ( A ) - bisect_left ( A , x ) Example \u00b6 >>> A = [ 2 , 4 , 5 , 7 ] >>> len ( A ) - bisect_left ( A , 0 ) 4 >>> len ( A ) - bisect_left ( A , 5 ) 2 \u81ea\u4f5c \u00b6 Complexity \u00b6 \\log{N} \\log{N} Code \u00b6 def is_ok ( mid ) -> bool : # \u6c42\u3081\u308b\u70b9\u304c\u533a\u9593[left, mid]\u306b\u542b\u307e\u308c\u308b\u5834\u5408True\u306b\u306a\u308b\u3088\u3046\u306b\u4f5c\u6210\u3059\u308b pass def binary_search ( left , right ): while left + 1 != right : mid = ( left + right ) // 2 if is_ok ( mid ): right = mid else : left = mid return right Example \u00b6 x \u3092\u633f\u5165\u3067\u304d\u308b\u5834\u6240\u306e\u63a2\u7d22( bisect_left \u3068\u540c\u3058) >>> A = [ 2 , 4 , 5 , 7 ] >>> x = 4 >>> def is_ok ( mid ): ... return x <= A [ mid ] >>> binary_search ( - 1 , len ( A )) ... 1","title":"\u4e8c\u5206\u63a2\u7d22"},{"location":"algorithms/binary_search/#_1","text":"","title":"\u4e8c\u5206\u63a2\u7d22"},{"location":"algorithms/binary_search/#_2","text":"from bisect import bisect_left from bisect import bisect_right bisect_right \u306f bisect \u306e\u30a8\u30a4\u30ea\u30a2\u30b9\u3067\u3042\u308b\u3002 Note \u30bd\u30fc\u30c8\u3055\u308c\u305f\u30ea\u30b9\u30c8\u306b\u5bfe\u3057\u3066\u7528\u3044\u308b\u3053\u3068","title":"\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea"},{"location":"algorithms/binary_search/#x","text":"i = bisect_left ( A , x ) if i != len ( A ) and A [ i ] == x : # \u7b49\u3057\u3044\u5024\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 print ( i ) else : # \u7b49\u3057\u3044\u5024\u306f\u306a\u3044 pass","title":"x \u3068\u7b49\u3057\u3044\u5024\u306e\u63a2\u7d22"},{"location":"algorithms/binary_search/#example","text":">>> def f ( A , x ): ... i = bisect_left ( A , x ) ... if i != len ( A ) and A [ i ] == x : ... return i ... else : ... return \"Not Found\" ... >>> A = [ 2 , 4 , 5 , 7 ] >>> f ( A , 4 ) 1 >>> f ( A , 1 ) 'Not Found'","title":"Example"},{"location":"algorithms/binary_search/#x_1","text":"n = len ( A ) - bisect_left ( A , x )","title":"x \u4ee5\u4e0a\u306e\u5024\u304c\u4f55\u500b\u3042\u308b\u304b"},{"location":"algorithms/binary_search/#example_1","text":">>> A = [ 2 , 4 , 5 , 7 ] >>> len ( A ) - bisect_left ( A , 0 ) 4 >>> len ( A ) - bisect_left ( A , 5 ) 2","title":"Example"},{"location":"algorithms/binary_search/#_3","text":"","title":"\u81ea\u4f5c"},{"location":"algorithms/binary_search/#complexity","text":"\\log{N} \\log{N}","title":"Complexity"},{"location":"algorithms/binary_search/#code","text":"def is_ok ( mid ) -> bool : # \u6c42\u3081\u308b\u70b9\u304c\u533a\u9593[left, mid]\u306b\u542b\u307e\u308c\u308b\u5834\u5408True\u306b\u306a\u308b\u3088\u3046\u306b\u4f5c\u6210\u3059\u308b pass def binary_search ( left , right ): while left + 1 != right : mid = ( left + right ) // 2 if is_ok ( mid ): right = mid else : left = mid return right","title":"Code"},{"location":"algorithms/binary_search/#example_2","text":"x \u3092\u633f\u5165\u3067\u304d\u308b\u5834\u6240\u306e\u63a2\u7d22( bisect_left \u3068\u540c\u3058) >>> A = [ 2 , 4 , 5 , 7 ] >>> x = 4 >>> def is_ok ( mid ): ... return x <= A [ mid ] >>> binary_search ( - 1 , len ( A )) ... 1","title":"Example"},{"location":"algorithms/binomial_coefficients/","text":"\u4e8c\u9805\u4fc2\u6570 \u00b6 \u30d5\u30a7\u30eb\u30de\u30fc\u306e\u5c0f\u5b9a\u7406\u3092\u7528\u3044\u305f\u4e8c\u9805\u4fc2\u6570\u306e\u8a08\u7b97 class Comb ( object ): def __init__ ( self , N , mod = 10 ** 9 + 7 ): \"\"\"\u524d\u51e6\u7406 \u8a08\u7b97\u91cf: O(N) \"\"\" self . mod = mod self . fac , self . inv = [ 1 ] * ( N + 1 ), [ 1 ] * ( N + 1 ) for i in range ( 2 , N + 1 ): self . fac [ i ] = self . fac [ i - 1 ] * i % mod self . inv [ i ] = self . inv [ i - 1 ] * pow ( i , mod - 2 , mod ) % mod def calc ( self , n , k ): \"\"\"\u4e8c\u9805\u4fc2\u6570\u306e\u8a08\u7b97 \u8a08\u7b97\u91cf: O(1) Examples: >>> comb = Comb(10) >>> comb.calc(10, 2) 45 \"\"\" if n >= k : return self . fac [ n ] * self . inv [ k ] * self . inv [ n - k ] % self . mod else : return 0","title":"\u4e8c\u9805\u4fc2\u6570"},{"location":"algorithms/binomial_coefficients/#_1","text":"\u30d5\u30a7\u30eb\u30de\u30fc\u306e\u5c0f\u5b9a\u7406\u3092\u7528\u3044\u305f\u4e8c\u9805\u4fc2\u6570\u306e\u8a08\u7b97 class Comb ( object ): def __init__ ( self , N , mod = 10 ** 9 + 7 ): \"\"\"\u524d\u51e6\u7406 \u8a08\u7b97\u91cf: O(N) \"\"\" self . mod = mod self . fac , self . inv = [ 1 ] * ( N + 1 ), [ 1 ] * ( N + 1 ) for i in range ( 2 , N + 1 ): self . fac [ i ] = self . fac [ i - 1 ] * i % mod self . inv [ i ] = self . inv [ i - 1 ] * pow ( i , mod - 2 , mod ) % mod def calc ( self , n , k ): \"\"\"\u4e8c\u9805\u4fc2\u6570\u306e\u8a08\u7b97 \u8a08\u7b97\u91cf: O(1) Examples: >>> comb = Comb(10) >>> comb.calc(10, 2) 45 \"\"\" if n >= k : return self . fac [ n ] * self . inv [ k ] * self . inv [ n - k ] % self . mod else : return 0","title":"\u4e8c\u9805\u4fc2\u6570"},{"location":"algorithms/bit_brute_force/","text":"bit\u5168\u63a2\u7d22 \u00b6 from itertools import product N = 3 for p in product ([ 0 , 1 ], repeat = N ): print ( p ) Example ( 0 , 0 , 0 ) ( 0 , 0 , 1 ) ( 0 , 1 , 0 ) ( 0 , 1 , 1 ) ( 1 , 0 , 0 ) ( 1 , 0 , 1 ) ( 1 , 1 , 0 ) ( 1 , 1 , 1 ) N = 3 for i in range ( 1 << N ): p = [] for j in range ( N ): p . append ( 1 & ( i >> j )) print ( p ) Example [ 0 , 0 , 0 ] [ 1 , 0 , 0 ] [ 0 , 1 , 0 ] [ 1 , 1 , 0 ] [ 0 , 0 , 1 ] [ 1 , 0 , 1 ] [ 0 , 1 , 1 ] [ 1 , 1 , 1 ]","title":"bit\u5168\u63a2\u7d22"},{"location":"algorithms/bit_brute_force/#bit","text":"from itertools import product N = 3 for p in product ([ 0 , 1 ], repeat = N ): print ( p ) Example ( 0 , 0 , 0 ) ( 0 , 0 , 1 ) ( 0 , 1 , 0 ) ( 0 , 1 , 1 ) ( 1 , 0 , 0 ) ( 1 , 0 , 1 ) ( 1 , 1 , 0 ) ( 1 , 1 , 1 ) N = 3 for i in range ( 1 << N ): p = [] for j in range ( N ): p . append ( 1 & ( i >> j )) print ( p ) Example [ 0 , 0 , 0 ] [ 1 , 0 , 0 ] [ 0 , 1 , 0 ] [ 1 , 1 , 0 ] [ 0 , 0 , 1 ] [ 1 , 0 , 1 ] [ 0 , 1 , 1 ] [ 1 , 1 , 1 ]","title":"bit\u5168\u63a2\u7d22"},{"location":"algorithms/bubble_sort/","text":"\u30d0\u30d6\u30eb\u30bd\u30fc\u30c8 \u00b6 Complexity \u00b6 \u6700\u60aa: O(N^2) O(N^2) \u6700\u826f: O(N) O(N) \u5e73\u5747: O(N^2) O(N^2) Code \u00b6 \u30bd\u30fc\u30c8\u306e\u307f \u00b6 def bubble_sort ( A : list ) -> list : N = len ( A ) B = A . copy () for i in range ( N ): for j in range ( 1 , N - i ): if B [ j ] < B [ j - 1 ]: B [ j ], B [ j - 1 ] = B [ j - 1 ], B [ j ] return B \u8ee2\u5012\u6570\u3092\u6c42\u3081\u308b \u00b6 def inversion_by_bubble_sort ( A : list ) -> int : N = len ( A ) B = A . copy () cnt = 0 for i in range ( N ): for j in range ( 1 , N - i ): if B [ j ] < B [ j - 1 ]: B [ j ], B [ j - 1 ] = B [ j - 1 ], B [ j ] cnt += 1 return cnt BIT\u3092\u7528\u3044\u308b\u3068 O(N\\log{N}) O(N\\log{N}) \u3068\u9ad8\u901f\u306b\u6c42\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u308b Examples \u00b6 >>> A = [ 3 , 4 , 6 , 2 , 1 , 9 , 0 , 7 , 5 , 8 ] >>> bubble_sort ( A ) [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] >>> inversion_by_bubble_sort ( A ) 18","title":"\u30d0\u30d6\u30eb\u30bd\u30fc\u30c8"},{"location":"algorithms/bubble_sort/#_1","text":"","title":"\u30d0\u30d6\u30eb\u30bd\u30fc\u30c8"},{"location":"algorithms/bubble_sort/#complexity","text":"\u6700\u60aa: O(N^2) O(N^2) \u6700\u826f: O(N) O(N) \u5e73\u5747: O(N^2) O(N^2)","title":"Complexity"},{"location":"algorithms/bubble_sort/#code","text":"","title":"Code"},{"location":"algorithms/bubble_sort/#_2","text":"def bubble_sort ( A : list ) -> list : N = len ( A ) B = A . copy () for i in range ( N ): for j in range ( 1 , N - i ): if B [ j ] < B [ j - 1 ]: B [ j ], B [ j - 1 ] = B [ j - 1 ], B [ j ] return B","title":"\u30bd\u30fc\u30c8\u306e\u307f"},{"location":"algorithms/bubble_sort/#_3","text":"def inversion_by_bubble_sort ( A : list ) -> int : N = len ( A ) B = A . copy () cnt = 0 for i in range ( N ): for j in range ( 1 , N - i ): if B [ j ] < B [ j - 1 ]: B [ j ], B [ j - 1 ] = B [ j - 1 ], B [ j ] cnt += 1 return cnt BIT\u3092\u7528\u3044\u308b\u3068 O(N\\log{N}) O(N\\log{N}) \u3068\u9ad8\u901f\u306b\u6c42\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u308b","title":"\u8ee2\u5012\u6570\u3092\u6c42\u3081\u308b"},{"location":"algorithms/bubble_sort/#examples","text":">>> A = [ 3 , 4 , 6 , 2 , 1 , 9 , 0 , 7 , 5 , 8 ] >>> bubble_sort ( A ) [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] >>> inversion_by_bubble_sort ( A ) 18","title":"Examples"},{"location":"algorithms/count_divisor/","text":"\u7d04\u6570\u306e\u500b\u6570\u3092\u30ab\u30a6\u30f3\u30c8 \u00b6 \u6574\u6570 N N \u306e\u7d04\u6570\u306e\u500b\u6570\u3092\u6570\u3048\u308b \u8a08\u7b97\u91cf \u00b6 O(\\sqrt{N}) O(\\sqrt{N}) Note N = 10^{12} N = 10^{12} \u3067300ms\u7a0b\u5ea6 \u30b3\u30fc\u30c9 \u00b6 def count_divisor ( n ): i , count = 1 , 0 while i * i <= n : if n % i == 0 : if i * i == n : count += 1 else : count += 2 i += 1 return count Example \u00b6 >>> count_divisor ( 12 ) 6","title":"\u7d04\u6570\u306e\u500b\u6570\u3092\u30ab\u30a6\u30f3\u30c8"},{"location":"algorithms/count_divisor/#_1","text":"\u6574\u6570 N N \u306e\u7d04\u6570\u306e\u500b\u6570\u3092\u6570\u3048\u308b","title":"\u7d04\u6570\u306e\u500b\u6570\u3092\u30ab\u30a6\u30f3\u30c8"},{"location":"algorithms/count_divisor/#_2","text":"O(\\sqrt{N}) O(\\sqrt{N}) Note N = 10^{12} N = 10^{12} \u3067300ms\u7a0b\u5ea6","title":"\u8a08\u7b97\u91cf"},{"location":"algorithms/count_divisor/#_3","text":"def count_divisor ( n ): i , count = 1 , 0 while i * i <= n : if n % i == 0 : if i * i == n : count += 1 else : count += 2 i += 1 return count","title":"\u30b3\u30fc\u30c9"},{"location":"algorithms/count_divisor/#example","text":">>> count_divisor ( 12 ) 6","title":"Example"},{"location":"algorithms/dfs/","text":"\u6df1\u3055\u512a\u5148\u63a2\u7d22\uff08DFS\uff09 \u00b6 Complexity \u00b6 O(N + M) O(N + M) N N \u306f\u30b0\u30e9\u30d5\u306e\u9802\u70b9\u306e\u6570 M M \u306f\u8fba\u306e\u6570 Code \u00b6 graph (Dict[List[int]]): \u96a3\u63a5\u30ea\u30b9\u30c8 start (int): \u958b\u59cb\u30ce\u30fc\u30c9\u756a\u53f7 \u518d\u5e30\u3042\u308a \u00b6 def dfs ( graph , v , visited = None ): if visited is None : visited = [ False ] * len ( graph ) visited [ v ] = True for u in graph [ v ]: if visited [ u ]: continue dfs ( graph , u , visited ) dfs ( graph , start ) \u518d\u5e30\u306a\u3057 \u00b6 def dfs ( graph , start ): stack = [ start ] visited = [ False ] * len ( graph ) visited [ start ] = True while len ( stack ) != 0 : v = stack . pop () for u in graph [ v ]: if visited [ u ]: continue stack . append ( u ) visited [ u ] = True Examples \u00b6 \u6700\u77ed\u8ddd\u96e2\u3092\u6c42\u3081\u308b \u00b6 def dfs ( graph , start ): stack = [ start ] visited = [ False ] * len ( graph ) visited [ start ] = True dist = [ 0 ] * len ( graph ) while len ( stack ) != 0 : v = stack . pop () for u in graph [ v ]: if visited [ u ]: continue stack . append ( u ) visited [ u ] = True dist [ u ] = dist [ v ] + 1 return dist \u6728\u306e\u76f4\u5f84\u3092\u6c42\u3081\u308b \u00b6 \u6700\u77ed\u8ddd\u96e2\u3092\u6c42\u3081\u308bDFS\u30922\u56de\u884c\u3046\u3053\u3068\u3067\u3001\u6728\u306e\u76f4\u5f84\uff08\u6728\u306b\u5b58\u5728\u3059\u308b2\u3064\u30ce\u30fc\u30c9\u9593\u306e\u6700\u5927\u8ddd\u96e2\uff09\u3092\u6c42\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u308b v = 0 dist = dfs ( graph , v ) v = dist . index ( max ( dist )) dist = dfs ( graph , v ) max ( dist ) + 1 # \u6728\u306e\u76f4\u5f84","title":"\u6df1\u3055\u512a\u5148\u63a2\u7d22\uff08DFS\uff09"},{"location":"algorithms/dfs/#dfs","text":"","title":"\u6df1\u3055\u512a\u5148\u63a2\u7d22\uff08DFS\uff09"},{"location":"algorithms/dfs/#complexity","text":"O(N + M) O(N + M) N N \u306f\u30b0\u30e9\u30d5\u306e\u9802\u70b9\u306e\u6570 M M \u306f\u8fba\u306e\u6570","title":"Complexity"},{"location":"algorithms/dfs/#code","text":"graph (Dict[List[int]]): \u96a3\u63a5\u30ea\u30b9\u30c8 start (int): \u958b\u59cb\u30ce\u30fc\u30c9\u756a\u53f7","title":"Code"},{"location":"algorithms/dfs/#_1","text":"def dfs ( graph , v , visited = None ): if visited is None : visited = [ False ] * len ( graph ) visited [ v ] = True for u in graph [ v ]: if visited [ u ]: continue dfs ( graph , u , visited ) dfs ( graph , start )","title":"\u518d\u5e30\u3042\u308a"},{"location":"algorithms/dfs/#_2","text":"def dfs ( graph , start ): stack = [ start ] visited = [ False ] * len ( graph ) visited [ start ] = True while len ( stack ) != 0 : v = stack . pop () for u in graph [ v ]: if visited [ u ]: continue stack . append ( u ) visited [ u ] = True","title":"\u518d\u5e30\u306a\u3057"},{"location":"algorithms/dfs/#examples","text":"","title":"Examples"},{"location":"algorithms/dfs/#_3","text":"def dfs ( graph , start ): stack = [ start ] visited = [ False ] * len ( graph ) visited [ start ] = True dist = [ 0 ] * len ( graph ) while len ( stack ) != 0 : v = stack . pop () for u in graph [ v ]: if visited [ u ]: continue stack . append ( u ) visited [ u ] = True dist [ u ] = dist [ v ] + 1 return dist","title":"\u6700\u77ed\u8ddd\u96e2\u3092\u6c42\u3081\u308b"},{"location":"algorithms/dfs/#_4","text":"\u6700\u77ed\u8ddd\u96e2\u3092\u6c42\u3081\u308bDFS\u30922\u56de\u884c\u3046\u3053\u3068\u3067\u3001\u6728\u306e\u76f4\u5f84\uff08\u6728\u306b\u5b58\u5728\u3059\u308b2\u3064\u30ce\u30fc\u30c9\u9593\u306e\u6700\u5927\u8ddd\u96e2\uff09\u3092\u6c42\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u308b v = 0 dist = dfs ( graph , v ) v = dist . index ( max ( dist )) dist = dfs ( graph , v ) max ( dist ) + 1 # \u6728\u306e\u76f4\u5f84","title":"\u6728\u306e\u76f4\u5f84\u3092\u6c42\u3081\u308b"},{"location":"algorithms/dijkstra/","text":"\u30c0\u30a4\u30af\u30b9\u30c8\u30e9\u6cd5 \u00b6 2\u70b9\u9593\u306e\u6700\u77ed\u7d4c\u8def\u3092\u6c42\u3081\u308b\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0 \u8a08\u7b97\u91cf \u00b6 O((E + V)\\log{V}) O((E + V)\\log{V}) V V : \u9802\u70b9\u306e\u6570 E E : \u8fba\u306e\u6570 Code \u00b6 from collections import defaultdict from heapq import heappop , heappush def dijkstra ( graph , start ): dist = defaultdict ( lambda : float ( \"inf\" )) dist [ start ] = 0 prev = {} Q = [] heappush ( Q , ( dist [ start ], start )) while Q : dist_u , u = heappop ( Q ) if dist [ u ] < dist_u : continue for v , c in graph [ u ]: if dist [ v ] > dist_u + c : dist [ v ] = dist_u + c prev [ v ] = u heappush ( Q , ( dist [ v ], v )) return dist , prev \u96a3\u63a5\u30b0\u30e9\u30d5\u306b\u3088\u308b\u6709\u5411\u30b0\u30e9\u30d5\u3092\u69cb\u7bc9\u3059\u308b\u3002 g = defaultdict ( list ) for _ in range ( N ): src , dst , cost = map ( int , input () . split ()) g [ src ] . append (( dst , cost )) g [ dst ] . append (( src , cost )) Examples \u00b6 >>> edges = [ ... ( 0 , 1 , 5 ), ... ( 0 , 2 , 4 ), ... ( 0 , 3 , 2 ), ... ( 1 , 2 , 2 ), ... ( 1 , 5 , 6 ), ... ( 2 , 3 , 3 ), ... ( 2 , 4 , 2 ), ... ( 3 , 4 , 6 ), ... ( 4 , 5 , 4 ), ... ] ... >>> g = defaultdict ( list ) >>> for src , dst , cost in edges : ... g [ src ] . append (( dst , cost )) ... g [ dst ] . append (( src , cost )) ... >>> v = 0 # \u59cb\u70b9 >>> u = 5 # \u7d42\u70b9 >>> dist , prev = dijkstra ( g , v ) \u6700\u77ed\u8ddd\u96e2\u3092\u6c42\u3081\u308b \u00b6 >>> dist [ u ] 10 \u6700\u77ed\u7d4c\u8def\u3092\u6c42\u3081\u308b \u00b6 >>> path = [] >>> node = u >>> while node is not None : ... path . append ( node ) ... node = prev [ node ] >>> path [:: - 1 ] [ 0 , 2 , 4 , 5 ]","title":"\u30c0\u30a4\u30af\u30b9\u30c8\u30e9\u6cd5"},{"location":"algorithms/dijkstra/#_1","text":"2\u70b9\u9593\u306e\u6700\u77ed\u7d4c\u8def\u3092\u6c42\u3081\u308b\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0","title":"\u30c0\u30a4\u30af\u30b9\u30c8\u30e9\u6cd5"},{"location":"algorithms/dijkstra/#_2","text":"O((E + V)\\log{V}) O((E + V)\\log{V}) V V : \u9802\u70b9\u306e\u6570 E E : \u8fba\u306e\u6570","title":"\u8a08\u7b97\u91cf"},{"location":"algorithms/dijkstra/#code","text":"from collections import defaultdict from heapq import heappop , heappush def dijkstra ( graph , start ): dist = defaultdict ( lambda : float ( \"inf\" )) dist [ start ] = 0 prev = {} Q = [] heappush ( Q , ( dist [ start ], start )) while Q : dist_u , u = heappop ( Q ) if dist [ u ] < dist_u : continue for v , c in graph [ u ]: if dist [ v ] > dist_u + c : dist [ v ] = dist_u + c prev [ v ] = u heappush ( Q , ( dist [ v ], v )) return dist , prev \u96a3\u63a5\u30b0\u30e9\u30d5\u306b\u3088\u308b\u6709\u5411\u30b0\u30e9\u30d5\u3092\u69cb\u7bc9\u3059\u308b\u3002 g = defaultdict ( list ) for _ in range ( N ): src , dst , cost = map ( int , input () . split ()) g [ src ] . append (( dst , cost )) g [ dst ] . append (( src , cost ))","title":"Code"},{"location":"algorithms/dijkstra/#examples","text":">>> edges = [ ... ( 0 , 1 , 5 ), ... ( 0 , 2 , 4 ), ... ( 0 , 3 , 2 ), ... ( 1 , 2 , 2 ), ... ( 1 , 5 , 6 ), ... ( 2 , 3 , 3 ), ... ( 2 , 4 , 2 ), ... ( 3 , 4 , 6 ), ... ( 4 , 5 , 4 ), ... ] ... >>> g = defaultdict ( list ) >>> for src , dst , cost in edges : ... g [ src ] . append (( dst , cost )) ... g [ dst ] . append (( src , cost )) ... >>> v = 0 # \u59cb\u70b9 >>> u = 5 # \u7d42\u70b9 >>> dist , prev = dijkstra ( g , v )","title":"Examples"},{"location":"algorithms/dijkstra/#_3","text":">>> dist [ u ] 10","title":"\u6700\u77ed\u8ddd\u96e2\u3092\u6c42\u3081\u308b"},{"location":"algorithms/dijkstra/#_4","text":">>> path = [] >>> node = u >>> while node is not None : ... path . append ( node ) ... node = prev [ node ] >>> path [:: - 1 ] [ 0 , 2 , 4 , 5 ]","title":"\u6700\u77ed\u7d4c\u8def\u3092\u6c42\u3081\u308b"},{"location":"algorithms/extension_gcd/","text":"\u62e1\u5f35\u30e6\u30fc\u30af\u30ea\u30c3\u30c9\u306e\u4e92\u9664\u6cd5 \u00b6 \u4e00\u6b21\u4e0d\u5b9a\u65b9\u7a0b\u5f0f ax + by = c ax + by = c \u306e\u6574\u6570\u89e3\u3092\u6c42\u3081\u308b Condition \u00b6 \u6574\u6570\u89e3\u3092\u3082\u3064\u6761\u4ef6\u306f c c \u304c \\gcd(a, b) \\gcd(a, b) \u3067\u5272\u308a\u5207\u308c\u308b\u3053\u3068 Complexity \u00b6 O(\\log{\\min{(a, b)}}) O(\\log{\\min{(a, b)}}) Code \u00b6 def extgcd ( a , b ): if b : d , y , x = extgcd ( b , a % b ) y -= ( a // b ) * x return d , x , y return a , 1 , 0 d , x , y = extgcd ( a , b ) if c % d != 0 : print ( \"\u89e3\u306a\u3057\" ) x *= c // d y *= c // d Examples \u00b6 \uff11\u3064\u306e\u89e3 \u00b6 6x + 8y = 10 6x + 8y = 10 \u306e\u6574\u6570\u89e3\u3092\u6c42\u3081\u308b >>> a , b , c = 6 , 8 , 10 >>> d , x , y = extgcd ( a , b ) >>> d 2 >>> x - 1 >>> y 1 >>> c % d 0 >>> x * ( c // d ) - 5 >>> y * ( c // d ) 5 \u3088\u3063\u3066\u3001 x=-5, y=5 x=-5, y=5 \u306a\u304a\u3001 extgcd \u306e\u623b\u308a\u5024\u3067\u3042\u308b (x, y) = (-1, 1) (x, y) = (-1, 1) \u306f 6x + 8y = d(=\\gcd(a, b)) 6x + 8y = d(=\\gcd(a, b)) \u306e\u89e3 \u4e00\u822c\u89e3 \u00b6 6x + 8y = 10 6x + 8y = 10 \u306e\u6574\u6570\u89e3\u306e\u4e00\u822c\u89e3\u3092\u6c42\u3081\u308b >>> a , b , c = 6 , 8 , 10 >>> d , x1 , y1 = extgcd ( a , b ) >>> c % d == 0 True >>> x1 *= c // d >>> y1 *= c // d >>> x1 , y1 ( - 5 , 5 ) >>> # x := (b // d)t + x1 >>> b // d 4 >>> x1 - 5 >>> # y := (-a // d)t + y1 >>> - a // d - 3 >>> y1 5 \u3088\u3063\u3066\u3001\u4e00\u822c\u89e3\u306f\u4efb\u610f\u306e\u6574\u6570 t t \u3092\u7528\u3044\u3066 x = 4t -5, y = -3t + 5 x = 4t -5, y = -3t + 5","title":"\u62e1\u5f35\u30e6\u30fc\u30af\u30ea\u30c3\u30c9\u306e\u4e92\u9664\u6cd5"},{"location":"algorithms/extension_gcd/#_1","text":"\u4e00\u6b21\u4e0d\u5b9a\u65b9\u7a0b\u5f0f ax + by = c ax + by = c \u306e\u6574\u6570\u89e3\u3092\u6c42\u3081\u308b","title":"\u62e1\u5f35\u30e6\u30fc\u30af\u30ea\u30c3\u30c9\u306e\u4e92\u9664\u6cd5"},{"location":"algorithms/extension_gcd/#condition","text":"\u6574\u6570\u89e3\u3092\u3082\u3064\u6761\u4ef6\u306f c c \u304c \\gcd(a, b) \\gcd(a, b) \u3067\u5272\u308a\u5207\u308c\u308b\u3053\u3068","title":"Condition"},{"location":"algorithms/extension_gcd/#complexity","text":"O(\\log{\\min{(a, b)}}) O(\\log{\\min{(a, b)}})","title":"Complexity"},{"location":"algorithms/extension_gcd/#code","text":"def extgcd ( a , b ): if b : d , y , x = extgcd ( b , a % b ) y -= ( a // b ) * x return d , x , y return a , 1 , 0 d , x , y = extgcd ( a , b ) if c % d != 0 : print ( \"\u89e3\u306a\u3057\" ) x *= c // d y *= c // d","title":"Code"},{"location":"algorithms/extension_gcd/#examples","text":"","title":"Examples"},{"location":"algorithms/extension_gcd/#1","text":"6x + 8y = 10 6x + 8y = 10 \u306e\u6574\u6570\u89e3\u3092\u6c42\u3081\u308b >>> a , b , c = 6 , 8 , 10 >>> d , x , y = extgcd ( a , b ) >>> d 2 >>> x - 1 >>> y 1 >>> c % d 0 >>> x * ( c // d ) - 5 >>> y * ( c // d ) 5 \u3088\u3063\u3066\u3001 x=-5, y=5 x=-5, y=5 \u306a\u304a\u3001 extgcd \u306e\u623b\u308a\u5024\u3067\u3042\u308b (x, y) = (-1, 1) (x, y) = (-1, 1) \u306f 6x + 8y = d(=\\gcd(a, b)) 6x + 8y = d(=\\gcd(a, b)) \u306e\u89e3","title":"\uff11\u3064\u306e\u89e3"},{"location":"algorithms/extension_gcd/#_2","text":"6x + 8y = 10 6x + 8y = 10 \u306e\u6574\u6570\u89e3\u306e\u4e00\u822c\u89e3\u3092\u6c42\u3081\u308b >>> a , b , c = 6 , 8 , 10 >>> d , x1 , y1 = extgcd ( a , b ) >>> c % d == 0 True >>> x1 *= c // d >>> y1 *= c // d >>> x1 , y1 ( - 5 , 5 ) >>> # x := (b // d)t + x1 >>> b // d 4 >>> x1 - 5 >>> # y := (-a // d)t + y1 >>> - a // d - 3 >>> y1 5 \u3088\u3063\u3066\u3001\u4e00\u822c\u89e3\u306f\u4efb\u610f\u306e\u6574\u6570 t t \u3092\u7528\u3044\u3066 x = 4t -5, y = -3t + 5 x = 4t -5, y = -3t + 5","title":"\u4e00\u822c\u89e3"},{"location":"algorithms/gcd_lcm/","text":"\u6700\u5927\u516c\u7d04\u6570\u3068\u6700\u5c0f\u516c\u500d\u6570 \u00b6 \u6700\u5927\u516c\u7d04\u6570 \u00b6 from math import gcd gcd ( a , b ) \u6700\u5c0f\u516c\u500d\u6570 \u00b6 def lcm ( a , b ): return a * b // gcd ( a , b )","title":"\u6700\u5927\u516c\u7d04\u6570\u3068\u6700\u5c0f\u516c\u500d\u6570"},{"location":"algorithms/gcd_lcm/#_1","text":"","title":"\u6700\u5927\u516c\u7d04\u6570\u3068\u6700\u5c0f\u516c\u500d\u6570"},{"location":"algorithms/gcd_lcm/#_2","text":"from math import gcd gcd ( a , b )","title":"\u6700\u5927\u516c\u7d04\u6570"},{"location":"algorithms/gcd_lcm/#_3","text":"def lcm ( a , b ): return a * b // gcd ( a , b )","title":"\u6700\u5c0f\u516c\u500d\u6570"},{"location":"algorithms/imos_method/","text":"\u3044\u3082\u3059\u6cd5 \u00b6 Code \u00b6 1\u6b21\u5143 \u00b6 def imos1d ( N : int , x : list [ tuple ]): S = [ 0 ] * N for l , y , v in x : S [ l ] += v S [ r ] -= v for i in range ( N ): S [ i ] += S [ i - 1 ] return S 2\u6b21\u5143 \u00b6 \u77e9\u5f62\u306e\u5de6\u4e0b\u306e\u70b9\u3092 (lx, ly) (lx, ly) \u3001\u53f3\u4e0a\u306e\u70b9\u3092 (rx, ry) (rx, ry) \u3068\u3059\u308b def imos2d ( H : int , W : int , xy : list [ tuple ]) -> list : S = [[ 0 ] * W for _ in range ( H )] for lx , ly , rx , ry , v in xy : S [ ly ][ lx ] += v S [ ly ][ rx ] -= v S [ ry ][ lx ] -= v S [ ry ][ rx ] += v for y in range ( H ): for x in range ( 1 , W ): S [ y ][ x ] += S [ y ][ x - 1 ] for y in range ( 1 , H ): for x in range ( W ): S [ y ][ x ] += S [ y - 1 ][ x ] return S Reference \u00b6 https://imoz.jp/algorithms/imos_method.html","title":"\u3044\u3082\u3059\u6cd5"},{"location":"algorithms/imos_method/#_1","text":"","title":"\u3044\u3082\u3059\u6cd5"},{"location":"algorithms/imos_method/#code","text":"","title":"Code"},{"location":"algorithms/imos_method/#1","text":"def imos1d ( N : int , x : list [ tuple ]): S = [ 0 ] * N for l , y , v in x : S [ l ] += v S [ r ] -= v for i in range ( N ): S [ i ] += S [ i - 1 ] return S","title":"1\u6b21\u5143"},{"location":"algorithms/imos_method/#2","text":"\u77e9\u5f62\u306e\u5de6\u4e0b\u306e\u70b9\u3092 (lx, ly) (lx, ly) \u3001\u53f3\u4e0a\u306e\u70b9\u3092 (rx, ry) (rx, ry) \u3068\u3059\u308b def imos2d ( H : int , W : int , xy : list [ tuple ]) -> list : S = [[ 0 ] * W for _ in range ( H )] for lx , ly , rx , ry , v in xy : S [ ly ][ lx ] += v S [ ly ][ rx ] -= v S [ ry ][ lx ] -= v S [ ry ][ rx ] += v for y in range ( H ): for x in range ( 1 , W ): S [ y ][ x ] += S [ y ][ x - 1 ] for y in range ( 1 , H ): for x in range ( W ): S [ y ][ x ] += S [ y - 1 ][ x ] return S","title":"2\u6b21\u5143"},{"location":"algorithms/imos_method/#reference","text":"https://imoz.jp/algorithms/imos_method.html","title":"Reference"},{"location":"algorithms/is_intersected/","text":"\u7dda\u5206\u4ea4\u5dee\u5224\u5b9a \u00b6 \u7dda\u5206 ab \u3068\u7dda\u5206 cd \u304c\u4ea4\u5dee\u3057\u3066\u3044\u308b\u304b\u5224\u5b9a\u3059\u308b \u30b3\u30fc\u30c9 \u00b6 def is_intersected ( a , b , c , d ): s = ( a [ 0 ] - b [ 0 ]) * ( c [ 1 ] - a [ 1 ]) + ( a [ 1 ] - b [ 1 ]) * ( a [ 0 ] - c [ 0 ]) t = ( a [ 0 ] - b [ 0 ]) * ( d [ 1 ] - a [ 1 ]) + ( a [ 1 ] - b [ 1 ]) * ( a [ 0 ] - d [ 0 ]) if s * t > 0 : return False s = ( c [ 0 ] - d [ 0 ]) * ( a [ 1 ] - c [ 1 ]) + ( c [ 1 ] - d [ 1 ]) * ( c [ 0 ] - a [ 0 ]) t = ( c [ 0 ] - d [ 0 ]) * ( b [ 1 ] - c [ 1 ]) + ( c [ 1 ] - d [ 1 ]) * ( c [ 0 ] - b [ 0 ]) if s * t > 0 : return False return True Example \u00b6 >>> a = ( 0 , 0 ) >>> c = ( 1 , 1 ) >>> d = ( 0 , 1 ) >>> e = ( 1 , 0 ) >>> is_intersected ( a , b , c , d ) True","title":"\u4ea4\u5dee\u5224\u5b9a"},{"location":"algorithms/is_intersected/#_1","text":"\u7dda\u5206 ab \u3068\u7dda\u5206 cd \u304c\u4ea4\u5dee\u3057\u3066\u3044\u308b\u304b\u5224\u5b9a\u3059\u308b","title":"\u7dda\u5206\u4ea4\u5dee\u5224\u5b9a"},{"location":"algorithms/is_intersected/#_2","text":"def is_intersected ( a , b , c , d ): s = ( a [ 0 ] - b [ 0 ]) * ( c [ 1 ] - a [ 1 ]) + ( a [ 1 ] - b [ 1 ]) * ( a [ 0 ] - c [ 0 ]) t = ( a [ 0 ] - b [ 0 ]) * ( d [ 1 ] - a [ 1 ]) + ( a [ 1 ] - b [ 1 ]) * ( a [ 0 ] - d [ 0 ]) if s * t > 0 : return False s = ( c [ 0 ] - d [ 0 ]) * ( a [ 1 ] - c [ 1 ]) + ( c [ 1 ] - d [ 1 ]) * ( c [ 0 ] - a [ 0 ]) t = ( c [ 0 ] - d [ 0 ]) * ( b [ 1 ] - c [ 1 ]) + ( c [ 1 ] - d [ 1 ]) * ( c [ 0 ] - b [ 0 ]) if s * t > 0 : return False return True","title":"\u30b3\u30fc\u30c9"},{"location":"algorithms/is_intersected/#example","text":">>> a = ( 0 , 0 ) >>> c = ( 1 , 1 ) >>> d = ( 0 , 1 ) >>> e = ( 1 , 0 ) >>> is_intersected ( a , b , c , d ) True","title":"Example"},{"location":"algorithms/is_prime/","text":"\u7d20\u6570\u5224\u5b9a \u00b6 \u6574\u6570 N N \u306e\u7d20\u6570\u304b\u5426\u304b\u3092\u5224\u5b9a\u3059\u308b \u8a08\u7b97\u91cf \u00b6 \u6700\u60aa\u8a08\u7b97\u91cf: O(\\sqrt{N}) O(\\sqrt{N}) \u30b3\u30fc\u30c9 \u00b6 def is_prime ( n ): i = 2 while i * i <= n : if n % i == 0 : return False i += 1 return True Example \u00b6 >>> is_prime ( 12 ) False","title":"\u7d20\u6570\u5224\u5b9a"},{"location":"algorithms/is_prime/#_1","text":"\u6574\u6570 N N \u306e\u7d20\u6570\u304b\u5426\u304b\u3092\u5224\u5b9a\u3059\u308b","title":"\u7d20\u6570\u5224\u5b9a"},{"location":"algorithms/is_prime/#_2","text":"\u6700\u60aa\u8a08\u7b97\u91cf: O(\\sqrt{N}) O(\\sqrt{N})","title":"\u8a08\u7b97\u91cf"},{"location":"algorithms/is_prime/#_3","text":"def is_prime ( n ): i = 2 while i * i <= n : if n % i == 0 : return False i += 1 return True","title":"\u30b3\u30fc\u30c9"},{"location":"algorithms/is_prime/#example","text":">>> is_prime ( 12 ) False","title":"Example"},{"location":"algorithms/make_divisors/","text":"\u7d04\u6570\u5217\u6319 \u00b6 \u6574\u6570 N N \u306e\u7d04\u6570\u306e\u5217\u6319\u3059\u308b \u8a08\u7b97\u91cf \u00b6 O(\\sqrt{N}) O(\\sqrt{N}) \u30b3\u30fc\u30c9 \u00b6 def make_divisors ( n ): i , divisors = 1 , [] while i * i <= n : if n % i == 0 : divisors . append ( i ) if i * i != n : divisors . append ( n // i ) i += 1 return divisors Warning \u51fa\u529b\u306f\u30bd\u30fc\u30c8\u3055\u308c\u306a\u3044\u3053\u3068\u306b\u6ce8\u610f Example \u00b6 >>> make_divisors ( 12 ) [ 1 , 12 , 2 , 6 , 3 , 4 ]","title":"\u7d04\u6570\u5217\u6319"},{"location":"algorithms/make_divisors/#_1","text":"\u6574\u6570 N N \u306e\u7d04\u6570\u306e\u5217\u6319\u3059\u308b","title":"\u7d04\u6570\u5217\u6319"},{"location":"algorithms/make_divisors/#_2","text":"O(\\sqrt{N}) O(\\sqrt{N})","title":"\u8a08\u7b97\u91cf"},{"location":"algorithms/make_divisors/#_3","text":"def make_divisors ( n ): i , divisors = 1 , [] while i * i <= n : if n % i == 0 : divisors . append ( i ) if i * i != n : divisors . append ( n // i ) i += 1 return divisors Warning \u51fa\u529b\u306f\u30bd\u30fc\u30c8\u3055\u308c\u306a\u3044\u3053\u3068\u306b\u6ce8\u610f","title":"\u30b3\u30fc\u30c9"},{"location":"algorithms/make_divisors/#example","text":">>> make_divisors ( 12 ) [ 1 , 12 , 2 , 6 , 3 , 4 ]","title":"Example"},{"location":"algorithms/prime_enumeration/","text":"\u7d20\u6570\u5217\u6319 \u00b6 \u6574\u6570 N N \u307e\u3067\u306e\u7d20\u6570\u3092\u30a8\u30e9\u30c8\u30b9\u30c6\u30cd\u30b9\u306e\u7be9\u3067\u6c42\u3081\u308b Complexity \u00b6 O(N\\log{\\log{N}}) O(N\\log{\\log{N}}) Code \u00b6 \u901a\u5e38 \u00b6 def primes ( n : int ) -> list : table = [ True ] * ( n + 1 ) table [: 2 ] = [ False , False ] for i in range ( 2 , n + 1 ): if table [ i ]: for j in range ( i + i , n + 1 , i ): table [ j ] = False return [ i for i , c in enumerate ( table ) if c ] \u9ad8\u901f\u7248 \u00b6 \u5076\u6570\u3092\u7be9\u304b\u3089\u843d\u3068\u3059\u3053\u3068\u306b\u3088\u308a\u3001 N=10^7 N=10^7 \u3067\u901a\u5e383000ms\u7a0b\u5ea6\u3060\u3063\u305f\u3082\u306e\u304c900ms\u7a0b\u5ea6\u307e\u3067\u9ad8\u901f\u5316\u3067\u304d\u308b def primes ( n ): table = [ True ] * (( n + 1 ) // 2 ) for i in range ( 1 , ( int ( n ** 0.5 ) + 1 ) // 2 ): if table [ i ]: for j in range ( i * 3 + 1 , ( n + 1 ) // 2 , i * 2 + 1 ): table [ j ] = False return [ 2 ] + [ i * 2 + 1 for i , c in enumerate ( table ) if c ][ 1 :] Example \u00b6 >>> primes ( 12 ) [ 2 , 3 , 5 , 7 , 11 ]","title":"\u7d20\u6570\u5217\u6319"},{"location":"algorithms/prime_enumeration/#_1","text":"\u6574\u6570 N N \u307e\u3067\u306e\u7d20\u6570\u3092\u30a8\u30e9\u30c8\u30b9\u30c6\u30cd\u30b9\u306e\u7be9\u3067\u6c42\u3081\u308b","title":"\u7d20\u6570\u5217\u6319"},{"location":"algorithms/prime_enumeration/#complexity","text":"O(N\\log{\\log{N}}) O(N\\log{\\log{N}})","title":"Complexity"},{"location":"algorithms/prime_enumeration/#code","text":"","title":"Code"},{"location":"algorithms/prime_enumeration/#_2","text":"def primes ( n : int ) -> list : table = [ True ] * ( n + 1 ) table [: 2 ] = [ False , False ] for i in range ( 2 , n + 1 ): if table [ i ]: for j in range ( i + i , n + 1 , i ): table [ j ] = False return [ i for i , c in enumerate ( table ) if c ]","title":"\u901a\u5e38"},{"location":"algorithms/prime_enumeration/#_3","text":"\u5076\u6570\u3092\u7be9\u304b\u3089\u843d\u3068\u3059\u3053\u3068\u306b\u3088\u308a\u3001 N=10^7 N=10^7 \u3067\u901a\u5e383000ms\u7a0b\u5ea6\u3060\u3063\u305f\u3082\u306e\u304c900ms\u7a0b\u5ea6\u307e\u3067\u9ad8\u901f\u5316\u3067\u304d\u308b def primes ( n ): table = [ True ] * (( n + 1 ) // 2 ) for i in range ( 1 , ( int ( n ** 0.5 ) + 1 ) // 2 ): if table [ i ]: for j in range ( i * 3 + 1 , ( n + 1 ) // 2 , i * 2 + 1 ): table [ j ] = False return [ 2 ] + [ i * 2 + 1 for i , c in enumerate ( table ) if c ][ 1 :]","title":"\u9ad8\u901f\u7248"},{"location":"algorithms/prime_enumeration/#example","text":">>> primes ( 12 ) [ 2 , 3 , 5 , 7 , 11 ]","title":"Example"},{"location":"algorithms/prime_factorize/","text":"\u7d20\u56e0\u6570\u5206\u89e3 \u00b6 \u6574\u6570 N N \u3092\u7d20\u56e0\u6570\u5206\u89e3\u3059\u308b SPF\u3092\u7528\u3044\u305f\u65b9\u6cd5 \u00b6 Complexity \u00b6 \u524d\u51e6\u7406: O(N\\log{\\log{N}}) O(N\\log{\\log{N}}) \u30af\u30a8\u30ea: O(\\log{N}) O(\\log{N}) Code \u00b6 \u524d\u51e6\u7406 def calc_spf ( n : int ) -> list : spf = [ i for i in range ( n + 1 )] i = 2 while i * i <= n : if spf [ i ] == i : j = i * i while j <= n : if spf [ j ] == j : spf [ j ] = i j += i i += 1 return spf \u30af\u30a8\u30ea def prime_factorize ( spf : list , n : int ) -> dict : factors = {} while n != 1 : m = spf [ n ] factors [ m ] = factors . get ( m , 0 ) + 1 n //= m return factors Example \u00b6 >>> spf = calc_spf ( 12 ) >>> spf [ 0 , 1 , 2 , 3 , 2 , 5 , 2 , 7 , 2 , 3 , 2 , 11 , 2 ] >>> prime_factorize ( spf , 12 ) { 2 : 2 , 3 : 1 } \u8a66\u3057\u5272\u308a\u6cd5 \u00b6 Complexity \u00b6 O(\\sqrt{N}) O(\\sqrt{N}) Code \u00b6 def prime_factorize ( n : int ) -> list : if n == 1 : return [ 1 ] i , factors = 2 , [] while i * i <= n : while n % i == 0 : n //= i factors . append ( i ) i += 1 if n > 1 : factors . append ( n ) return factors Example \u00b6 >>> prime_factorize ( 12 ) [ 2 , 2 , 3 ] >>> from collections import Counter >>> Counter ( prime_factorize ( 12 )) Counter ({ 2 : 2 , 3 : 1 })","title":"\u7d20\u56e0\u6570\u5206\u89e3"},{"location":"algorithms/prime_factorize/#_1","text":"\u6574\u6570 N N \u3092\u7d20\u56e0\u6570\u5206\u89e3\u3059\u308b","title":"\u7d20\u56e0\u6570\u5206\u89e3"},{"location":"algorithms/prime_factorize/#spf","text":"","title":"SPF\u3092\u7528\u3044\u305f\u65b9\u6cd5"},{"location":"algorithms/prime_factorize/#complexity","text":"\u524d\u51e6\u7406: O(N\\log{\\log{N}}) O(N\\log{\\log{N}}) \u30af\u30a8\u30ea: O(\\log{N}) O(\\log{N})","title":"Complexity"},{"location":"algorithms/prime_factorize/#code","text":"\u524d\u51e6\u7406 def calc_spf ( n : int ) -> list : spf = [ i for i in range ( n + 1 )] i = 2 while i * i <= n : if spf [ i ] == i : j = i * i while j <= n : if spf [ j ] == j : spf [ j ] = i j += i i += 1 return spf \u30af\u30a8\u30ea def prime_factorize ( spf : list , n : int ) -> dict : factors = {} while n != 1 : m = spf [ n ] factors [ m ] = factors . get ( m , 0 ) + 1 n //= m return factors","title":"Code"},{"location":"algorithms/prime_factorize/#example","text":">>> spf = calc_spf ( 12 ) >>> spf [ 0 , 1 , 2 , 3 , 2 , 5 , 2 , 7 , 2 , 3 , 2 , 11 , 2 ] >>> prime_factorize ( spf , 12 ) { 2 : 2 , 3 : 1 }","title":"Example"},{"location":"algorithms/prime_factorize/#_2","text":"","title":"\u8a66\u3057\u5272\u308a\u6cd5"},{"location":"algorithms/prime_factorize/#complexity_1","text":"O(\\sqrt{N}) O(\\sqrt{N})","title":"Complexity"},{"location":"algorithms/prime_factorize/#code_1","text":"def prime_factorize ( n : int ) -> list : if n == 1 : return [ 1 ] i , factors = 2 , [] while i * i <= n : while n % i == 0 : n //= i factors . append ( i ) i += 1 if n > 1 : factors . append ( n ) return factors","title":"Code"},{"location":"algorithms/prime_factorize/#example_1","text":">>> prime_factorize ( 12 ) [ 2 , 2 , 3 ] >>> from collections import Counter >>> Counter ( prime_factorize ( 12 )) Counter ({ 2 : 2 , 3 : 1 })","title":"Example"},{"location":"algorithms/scc/","text":"\u5f37\u9023\u7d50\u6210\u5206\u5206\u89e3\uff08SCC\uff09 \u00b6 \u6709\u5411\u30b0\u30e9\u30d5\u3092\u5f37\u9023\u7d50\uff08\u304a\u4e92\u3044\u306b\u884c\u304d\u6765\u3067\u304d\u308b \u21d4 \u540c\u3058\u30b0\u30eb\u30fc\u30d7\uff09\u306b\u306a\u308b\u3088\u3046\u306b\u30b0\u30eb\u30fc\u30d7\u5206\u3051\u3059\u308b Complexity \u00b6 2\u56de DFS \u3092\u884c\u3046 O(N + M) O(N + M) N N \u306f\u30b0\u30e9\u30d5\u306e\u9802\u70b9\u306e\u6570 M M \u306f\u8fba\u306e\u6570 Code \u00b6 def scc ( n : int , graph : dict , rev_graph : dict ) -> list : \"\"\"\u5f37\u9023\u7d50\u6210\u5206\u5206\u89e3\uff08SCC\uff09 Args: n: \u9802\u70b9\u306e\u6570 graph: \u9806\u65b9\u5411\u306e\u96a3\u63a5\u30b0\u30e9\u30d5 rev_graph: \u9006\u65b9\u5411\u306e\u96a3\u63a5\u30b0\u30e9\u30d5 Return: \u9802\u70b9\u3054\u3068\u306e\u30b0\u30eb\u30fc\u30d7\u756a\u53f7 \"\"\" order = [] visited = [ False ] * n group = [ None ] * n def dfs ( v ): visited [ v ] = True for u in graph [ v ]: if visited [ u ] is False : dfs ( u ) order . append ( v ) def rev_dfs ( v , col ): group [ v ] = col visited [ v ] = True for u in rev_graph [ v ]: if visited [ u ] is False : rev_dfs ( v , col ) for v in range ( n ): if visited [ v ] is False : dfs ( v ) visited = [ False ] * n label = 0 for v in reversed ( order ): if visited [ v ] is False : rev_dfs ( v , label ) label += 1 return group","title":"\u5f37\u9023\u7d50\u6210\u5206\u5206\u89e3\uff08SCC\uff09"},{"location":"algorithms/scc/#scc","text":"\u6709\u5411\u30b0\u30e9\u30d5\u3092\u5f37\u9023\u7d50\uff08\u304a\u4e92\u3044\u306b\u884c\u304d\u6765\u3067\u304d\u308b \u21d4 \u540c\u3058\u30b0\u30eb\u30fc\u30d7\uff09\u306b\u306a\u308b\u3088\u3046\u306b\u30b0\u30eb\u30fc\u30d7\u5206\u3051\u3059\u308b","title":"\u5f37\u9023\u7d50\u6210\u5206\u5206\u89e3\uff08SCC\uff09"},{"location":"algorithms/scc/#complexity","text":"2\u56de DFS \u3092\u884c\u3046 O(N + M) O(N + M) N N \u306f\u30b0\u30e9\u30d5\u306e\u9802\u70b9\u306e\u6570 M M \u306f\u8fba\u306e\u6570","title":"Complexity"},{"location":"algorithms/scc/#code","text":"def scc ( n : int , graph : dict , rev_graph : dict ) -> list : \"\"\"\u5f37\u9023\u7d50\u6210\u5206\u5206\u89e3\uff08SCC\uff09 Args: n: \u9802\u70b9\u306e\u6570 graph: \u9806\u65b9\u5411\u306e\u96a3\u63a5\u30b0\u30e9\u30d5 rev_graph: \u9006\u65b9\u5411\u306e\u96a3\u63a5\u30b0\u30e9\u30d5 Return: \u9802\u70b9\u3054\u3068\u306e\u30b0\u30eb\u30fc\u30d7\u756a\u53f7 \"\"\" order = [] visited = [ False ] * n group = [ None ] * n def dfs ( v ): visited [ v ] = True for u in graph [ v ]: if visited [ u ] is False : dfs ( u ) order . append ( v ) def rev_dfs ( v , col ): group [ v ] = col visited [ v ] = True for u in rev_graph [ v ]: if visited [ u ] is False : rev_dfs ( v , col ) for v in range ( n ): if visited [ v ] is False : dfs ( v ) visited = [ False ] * n label = 0 for v in reversed ( order ): if visited [ v ] is False : rev_dfs ( v , label ) label += 1 return group","title":"Code"},{"location":"algorithms/segment_tree/","text":"\u30bb\u30b0\u30e1\u30f3\u30c8\u6728 \u00b6 Range Minimum Query (RMQ) \u00b6 Complexity \u00b6 update : O(\\log{N}) O(\\log{N}) query : O(\\log{N}) O(\\log{N}) Code \u00b6 class RMQ : def __init__ ( self , A : list ) -> None : self . n = 2 ** ( len ( A ) - 1 ) . bit_length () self . data = [ float ( \"inf\" )] * ( 2 * self . n - 1 ) for i in range ( len ( A )): self . update ( i , A [ i ]) def update ( self , i : int , x : int ) -> None : \"\"\"i\u756a\u76ee\u306e\u5024\u3092x\u306b\u66f4\u65b0\u3059\u308b\"\"\" i += self . n - 1 self . data [ i ] = x while i >= 0 : i = ( i - 1 ) // 2 self . data [ i ] = min ( self . data [ 2 * i + 1 ], self . data [ 2 * i + 2 ]) def query ( self , left : int , right : int ) -> int : \"\"\"\u533a\u9593[left, right)\u306e\u6700\u5c0f\u5024\u3092\u53d6\u5f97\u3059\u308b\"\"\" left += self . n right += self . n s = float ( \"inf\" ) while left < right : if left & 1 : s = min ( s , self . data [ left - 1 ]) left += 1 left >>= 1 if right & 1 : right -= 1 s = min ( s , self . data [ right - 1 ]) right >>= 1 return s Range Update Query (RUQ) \u00b6 Complexity \u00b6 update : O(\\log{N}) O(\\log{N}) find : O(\\log{N}) O(\\log{N}) Code \u00b6 class RUQ : def __init__ ( self , N : int ) -> None : self . n = 2 ** ( N - 1 ) . bit_length () self . data = [ None ] * ( 2 * self . n - 1 ) self . t = 0 def update ( self , left : int , right : int , x : int ) -> None : \"\"\"\u533a\u9593[left, right)\u306e\u5024\u3092x\u306b\u66f4\u65b0\u3059\u308b\"\"\" left += self . n right += self . n self . t += 1 while left < right : if left & 1 : self . data [ left - 1 ] = ( self . t , x ) left += 1 left >>= 1 if right & 1 : right -= 1 self . data [ right - 1 ] = ( self . t , x ) right >>= 1 def find ( self , i : int ) -> int : \"\"\"i\u756a\u76ee\u306e\u5024\u3092\u53d6\u5f97\u3059\u308b\"\"\" i += self . n - 1 x = ( - 1 , float ( \"-inf\" )) while i >= 0 : if self . data [ i ] is not None : if x [ 0 ] < self . data [ i ][ 0 ]: x = self . data [ i ] i = ( i - 1 ) // 2 return x [ 1 ]","title":"\u30bb\u30b0\u30e1\u30f3\u30c8\u6728"},{"location":"algorithms/segment_tree/#_1","text":"","title":"\u30bb\u30b0\u30e1\u30f3\u30c8\u6728"},{"location":"algorithms/segment_tree/#range-minimum-query-rmq","text":"","title":"Range Minimum Query (RMQ)"},{"location":"algorithms/segment_tree/#complexity","text":"update : O(\\log{N}) O(\\log{N}) query : O(\\log{N}) O(\\log{N})","title":"Complexity"},{"location":"algorithms/segment_tree/#code","text":"class RMQ : def __init__ ( self , A : list ) -> None : self . n = 2 ** ( len ( A ) - 1 ) . bit_length () self . data = [ float ( \"inf\" )] * ( 2 * self . n - 1 ) for i in range ( len ( A )): self . update ( i , A [ i ]) def update ( self , i : int , x : int ) -> None : \"\"\"i\u756a\u76ee\u306e\u5024\u3092x\u306b\u66f4\u65b0\u3059\u308b\"\"\" i += self . n - 1 self . data [ i ] = x while i >= 0 : i = ( i - 1 ) // 2 self . data [ i ] = min ( self . data [ 2 * i + 1 ], self . data [ 2 * i + 2 ]) def query ( self , left : int , right : int ) -> int : \"\"\"\u533a\u9593[left, right)\u306e\u6700\u5c0f\u5024\u3092\u53d6\u5f97\u3059\u308b\"\"\" left += self . n right += self . n s = float ( \"inf\" ) while left < right : if left & 1 : s = min ( s , self . data [ left - 1 ]) left += 1 left >>= 1 if right & 1 : right -= 1 s = min ( s , self . data [ right - 1 ]) right >>= 1 return s","title":"Code"},{"location":"algorithms/segment_tree/#range-update-query-ruq","text":"","title":"Range Update Query (RUQ)"},{"location":"algorithms/segment_tree/#complexity_1","text":"update : O(\\log{N}) O(\\log{N}) find : O(\\log{N}) O(\\log{N})","title":"Complexity"},{"location":"algorithms/segment_tree/#code_1","text":"class RUQ : def __init__ ( self , N : int ) -> None : self . n = 2 ** ( N - 1 ) . bit_length () self . data = [ None ] * ( 2 * self . n - 1 ) self . t = 0 def update ( self , left : int , right : int , x : int ) -> None : \"\"\"\u533a\u9593[left, right)\u306e\u5024\u3092x\u306b\u66f4\u65b0\u3059\u308b\"\"\" left += self . n right += self . n self . t += 1 while left < right : if left & 1 : self . data [ left - 1 ] = ( self . t , x ) left += 1 left >>= 1 if right & 1 : right -= 1 self . data [ right - 1 ] = ( self . t , x ) right >>= 1 def find ( self , i : int ) -> int : \"\"\"i\u756a\u76ee\u306e\u5024\u3092\u53d6\u5f97\u3059\u308b\"\"\" i += self . n - 1 x = ( - 1 , float ( \"-inf\" )) while i >= 0 : if self . data [ i ] is not None : if x [ 0 ] < self . data [ i ][ 0 ]: x = self . data [ i ] i = ( i - 1 ) // 2 return x [ 1 ]","title":"Code"},{"location":"algorithms/union_find/","text":"Union Find \u00b6 Complexity \u00b6 O(\\alpha(N)) O(\\alpha(N)) Note \\alpha(\\cdot) \\alpha(\\cdot) \u306f\u30a2\u30c3\u30ab\u30fc\u30de\u30f3\u95a2\u6570\u3067\u3042\u308a\u3001 \\log \\log \u3088\u308a\u5c0f\u3055\u3044 Code \u00b6 class UnionFind : def __init__ ( self , n : int ) -> None : self . par = list ( range ( n )) self . rank = [ 0 ] * n self . _size = [ 1 ] * n def find ( self , x : int ) -> int : \"\"\"x \u304c\u5c5e\u3059\u308b\u30b0\u30eb\u30fc\u30d7\u3092\u63a2\u7d22\"\"\" if self . par [ x ] == x : return x self . par [ x ] = self . find ( self . par [ x ]) return self . par [ x ] def union ( self , x : int , y : int ) -> None : \"\"\"x \u3068 y \u306e\u30b0\u30eb\u30fc\u30d7\u3092\u7d50\u5408\"\"\" if self . is_same ( x , y ): return if self . rank [ x ] < self . rank [ y ]: x , y = y , x if self . rank [ x ] == self . rank [ y ]: self . rank [ x ] += 1 self . par [ y ] = x self . _size [ x ] += self . _size [ y ] def is_same ( self , x : int , y : int ) -> bool : \"\"\"x \u3068 y \u304c\u540c\u3058\u30b0\u30eb\u30fc\u30d7\u304b\u5426\u304b\"\"\" return self . find ( x ) == self . find ( y ) def size ( self , x : int ) -> int : \"\"\"x \u304c\u5c5e\u3059\u308b\u30b0\u30eb\u30fc\u30d7\u306e\u8981\u7d20\u6570\"\"\" x = self . find ( x ) return self . _size [ x ]","title":"Union Find"},{"location":"algorithms/union_find/#union-find","text":"","title":"Union Find"},{"location":"algorithms/union_find/#complexity","text":"O(\\alpha(N)) O(\\alpha(N)) Note \\alpha(\\cdot) \\alpha(\\cdot) \u306f\u30a2\u30c3\u30ab\u30fc\u30de\u30f3\u95a2\u6570\u3067\u3042\u308a\u3001 \\log \\log \u3088\u308a\u5c0f\u3055\u3044","title":"Complexity"},{"location":"algorithms/union_find/#code","text":"class UnionFind : def __init__ ( self , n : int ) -> None : self . par = list ( range ( n )) self . rank = [ 0 ] * n self . _size = [ 1 ] * n def find ( self , x : int ) -> int : \"\"\"x \u304c\u5c5e\u3059\u308b\u30b0\u30eb\u30fc\u30d7\u3092\u63a2\u7d22\"\"\" if self . par [ x ] == x : return x self . par [ x ] = self . find ( self . par [ x ]) return self . par [ x ] def union ( self , x : int , y : int ) -> None : \"\"\"x \u3068 y \u306e\u30b0\u30eb\u30fc\u30d7\u3092\u7d50\u5408\"\"\" if self . is_same ( x , y ): return if self . rank [ x ] < self . rank [ y ]: x , y = y , x if self . rank [ x ] == self . rank [ y ]: self . rank [ x ] += 1 self . par [ y ] = x self . _size [ x ] += self . _size [ y ] def is_same ( self , x : int , y : int ) -> bool : \"\"\"x \u3068 y \u304c\u540c\u3058\u30b0\u30eb\u30fc\u30d7\u304b\u5426\u304b\"\"\" return self . find ( x ) == self . find ( y ) def size ( self , x : int ) -> int : \"\"\"x \u304c\u5c5e\u3059\u308b\u30b0\u30eb\u30fc\u30d7\u306e\u8981\u7d20\u6570\"\"\" x = self . find ( x ) return self . _size [ x ]","title":"Code"},{"location":"algorithms/warshall_floyd/","text":"\u30ef\u30fc\u30b7\u30e3\u30eb\u30d5\u30ed\u30a4\u30c9\u6cd5 \u00b6 from scipy.sparse.csgraph import floyd_warshall","title":"\u30ef\u30fc\u30b7\u30e3\u30eb\u30d5\u30ed\u30a4\u30c9\u6cd5"},{"location":"algorithms/warshall_floyd/#_1","text":"from scipy.sparse.csgraph import floyd_warshall","title":"\u30ef\u30fc\u30b7\u30e3\u30eb\u30d5\u30ed\u30a4\u30c9\u6cd5"},{"location":"algorithms/weighted_union_find/","text":"Weighted Union Find \u00b6 Code \u00b6 class WeightedUnionFind ( object ): def __init__ ( self , n = 1 ): self . par = [ i for i in range ( n )] self . diff_weight = [ 0 for i in range ( n )] def find ( self , x ): if self . par [ x ] == x : return x else : root = self . find ( self . par [ x ]) self . diff_weight [ x ] += self . diff_weight [ self . par [ x ]] self . par [ x ] = root return root def union ( self , x , y , w ): w += self . weight ( x ) w -= self . weight ( y ) x = self . find ( x ) y = self . find ( y ) if x != y : self . par [ y ] = x self . diff_weight [ y ] = w def is_same ( self , x , y ): return self . find ( x ) == self . find ( y ) def weight ( self , x ): self . find ( x ) return self . diff_weight [ x ] def diff ( self , x , y ): return self . weight ( y ) - self . weight ( x )","title":"\u91cd\u307f\u4ed8\u304dUnion Find"},{"location":"algorithms/weighted_union_find/#weighted-union-find","text":"","title":"Weighted Union Find"},{"location":"algorithms/weighted_union_find/#code","text":"class WeightedUnionFind ( object ): def __init__ ( self , n = 1 ): self . par = [ i for i in range ( n )] self . diff_weight = [ 0 for i in range ( n )] def find ( self , x ): if self . par [ x ] == x : return x else : root = self . find ( self . par [ x ]) self . diff_weight [ x ] += self . diff_weight [ self . par [ x ]] self . par [ x ] = root return root def union ( self , x , y , w ): w += self . weight ( x ) w -= self . weight ( y ) x = self . find ( x ) y = self . find ( y ) if x != y : self . par [ y ] = x self . diff_weight [ y ] = w def is_same ( self , x , y ): return self . find ( x ) == self . find ( y ) def weight ( self , x ): self . find ( x ) return self . diff_weight [ x ] def diff ( self , x , y ): return self . weight ( y ) - self . weight ( x )","title":"Code"},{"location":"atcoder/abc054d/","text":"AtCoder ABC054 D - Mixing Experiment \u00b6 https://atcoder.jp/contests/abc054/tasks/abc054_d \u554f\u984c\u6982\u8981 \u00b6 \u7269\u8ceaA\u3092 a \u30b0\u30e9\u30e0\u3001\u7269\u8ceaB\u3092 b \u30b0\u30e9\u30e0\u542b\u307f c \u5186\u3067\u3042\u308b\u85ac\u54c1\u304c N \u500b\u4e0e\u3048\u3089\u308c\u308b \u7269\u8ceaA\u3068\u7269\u8ceaB\u306e\u6bd4\u7387\u304c Ma : Mb \u306b\u306a\u308b\u3088\u3046\u306b\u3001\u85ac\u54c1\u3092\u8cb7\u3063\u305f\u3068\u304d\u306e\u6700\u5c0f\u30b3\u30b9\u30c8\u3092\u6c42\u3081\u3088 \u5236\u7d04: N <= 40 , a, b <= 10 \u89e3\u8aac\u3068\u30b3\u30fc\u30c9 \u00b6 3\u6b21\u5143DP\u3092\u7528\u3044\u3066\u89e3\u304d\u307e\u3059\u3002 N , Ma , Mb = map ( int , input () . split ()) items = [[ int ( x ) for x in input () . split ()] for _ in range ( N )] # \u7269\u8ceaA\u3068B\u306e\u5408\u8a08\u5024\u3092\u6c42\u3081\u308b A , B = 0 , 0 for a , b , _ in items : A += a B += b # DP\u306e\u521d\u671f\u5316 # dp[i][j][k]: \u85ac\u54c1\u3092i\u500b\u307e\u3067\u9078\u3073j\u30b0\u30e9\u30e0\u3001k\u30b0\u30e9\u30e0\u306b\u306a\u308b\u3068\u304d\u306e\u6700\u5c0f\u30b3\u30b9\u30c8 dp = [[[ float ( \"inf\" )] * ( B + 1 ) for _ in range ( A + 1 )] for _ in range ( N + 1 )] for i in range ( N + 1 ): dp [ i ][ 0 ][ 0 ] = 0 # DP\u306e\u66f4\u65b0 # 3\u91cd\u30eb\u30fc\u30d7\u306e\u8a08\u7b97\u91cf\u306f\u3001\u305d\u308c\u305e\u308cO(N=40), O(Na=400), O(Nb=400)\u306a\u306e\u3067\u3001O(10^6) for i in range ( N ): a , b , c = items [ i ] for j in range ( A + 1 ): for k in range ( B + 1 ): # \u85ac\u54c1\u3092\u52a0\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u5834\u5408 if j - a >= 0 and k - b >= 0 : # \u85ac\u54c1\u3092\u52a0\u3048\u305f\u3068\u304d\u306b\u30b3\u30b9\u30c8\u304c\u5c0f\u3055\u304f\u306a\u308b\u5834\u5408\u66f4\u65b0\u3059\u308b dp [ i + 1 ][ j ][ k ] = min ( dp [ i ][ j - a ][ k - b ] + c , dp [ i ][ j ][ k ]) else : dp [ i + 1 ][ j ][ k ] = dp [ i ][ j ][ k ] # dp[N][:][:]\u306e\u4e2d\u304b\u3089\u6bd4\u7387\u306b\u5408\u81f4\u3059\u308b\u3082\u306e\u3092\u53d6\u308a\u51fa\u3059 ans = float ( \"inf\" ) for x in range ( 1 , min ( A // Ma , B // Mb ) + 1 ): a = Ma * x b = Mb * x ans = min ( dp [ N ][ a ][ b ], ans ) if ans == float ( \"inf\" ): ans = - 1 print ( ans )","title":"AtCoder ABC054 D - Mixing Experiment"},{"location":"atcoder/abc054d/#atcoder-abc054-d-mixing-experiment","text":"https://atcoder.jp/contests/abc054/tasks/abc054_d","title":"AtCoder ABC054 D - Mixing Experiment"},{"location":"atcoder/abc054d/#_1","text":"\u7269\u8ceaA\u3092 a \u30b0\u30e9\u30e0\u3001\u7269\u8ceaB\u3092 b \u30b0\u30e9\u30e0\u542b\u307f c \u5186\u3067\u3042\u308b\u85ac\u54c1\u304c N \u500b\u4e0e\u3048\u3089\u308c\u308b \u7269\u8ceaA\u3068\u7269\u8ceaB\u306e\u6bd4\u7387\u304c Ma : Mb \u306b\u306a\u308b\u3088\u3046\u306b\u3001\u85ac\u54c1\u3092\u8cb7\u3063\u305f\u3068\u304d\u306e\u6700\u5c0f\u30b3\u30b9\u30c8\u3092\u6c42\u3081\u3088 \u5236\u7d04: N <= 40 , a, b <= 10","title":"\u554f\u984c\u6982\u8981"},{"location":"atcoder/abc054d/#_2","text":"3\u6b21\u5143DP\u3092\u7528\u3044\u3066\u89e3\u304d\u307e\u3059\u3002 N , Ma , Mb = map ( int , input () . split ()) items = [[ int ( x ) for x in input () . split ()] for _ in range ( N )] # \u7269\u8ceaA\u3068B\u306e\u5408\u8a08\u5024\u3092\u6c42\u3081\u308b A , B = 0 , 0 for a , b , _ in items : A += a B += b # DP\u306e\u521d\u671f\u5316 # dp[i][j][k]: \u85ac\u54c1\u3092i\u500b\u307e\u3067\u9078\u3073j\u30b0\u30e9\u30e0\u3001k\u30b0\u30e9\u30e0\u306b\u306a\u308b\u3068\u304d\u306e\u6700\u5c0f\u30b3\u30b9\u30c8 dp = [[[ float ( \"inf\" )] * ( B + 1 ) for _ in range ( A + 1 )] for _ in range ( N + 1 )] for i in range ( N + 1 ): dp [ i ][ 0 ][ 0 ] = 0 # DP\u306e\u66f4\u65b0 # 3\u91cd\u30eb\u30fc\u30d7\u306e\u8a08\u7b97\u91cf\u306f\u3001\u305d\u308c\u305e\u308cO(N=40), O(Na=400), O(Nb=400)\u306a\u306e\u3067\u3001O(10^6) for i in range ( N ): a , b , c = items [ i ] for j in range ( A + 1 ): for k in range ( B + 1 ): # \u85ac\u54c1\u3092\u52a0\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u5834\u5408 if j - a >= 0 and k - b >= 0 : # \u85ac\u54c1\u3092\u52a0\u3048\u305f\u3068\u304d\u306b\u30b3\u30b9\u30c8\u304c\u5c0f\u3055\u304f\u306a\u308b\u5834\u5408\u66f4\u65b0\u3059\u308b dp [ i + 1 ][ j ][ k ] = min ( dp [ i ][ j - a ][ k - b ] + c , dp [ i ][ j ][ k ]) else : dp [ i + 1 ][ j ][ k ] = dp [ i ][ j ][ k ] # dp[N][:][:]\u306e\u4e2d\u304b\u3089\u6bd4\u7387\u306b\u5408\u81f4\u3059\u308b\u3082\u306e\u3092\u53d6\u308a\u51fa\u3059 ans = float ( \"inf\" ) for x in range ( 1 , min ( A // Ma , B // Mb ) + 1 ): a = Ma * x b = Mb * x ans = min ( dp [ N ][ a ][ b ], ans ) if ans == float ( \"inf\" ): ans = - 1 print ( ans )","title":"\u89e3\u8aac\u3068\u30b3\u30fc\u30c9"},{"location":"basic/accumulation/","text":"\u7d2f\u7a4d\u548c \u00b6 from itertools import accumulate B = list ( accumulate ( A )) \u533a\u9593\u306e\u7dcf\u548c \u00b6 \u7d2f\u7a4d\u548c B B \u3092\u7528\u3044\u3066\u533a\u9593 [L,R] [L,R] \u306e\u548c\u3092 B[R+1]-S[L] B[R+1]-S[L] \u3067\u6c42\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u308b Example >>> A = [ 3 , 4 , 6 , 2 , 1 , 9 , 0 , 7 , 5 , 8 ] >>> B = [ 0 ] + list ( accumulate ( A )) [ 0 , 3 , 7 , 13 , 15 , 16 , 25 , 25 , 32 , 37 , 45 ] >>> # \u533a\u9593[2, 4](A[2]=6, A[3]=2, A[4]=1)\u306e\u548c\u3092\u6c42\u3081\u308b >>> B [ 4 + 1 ] - B [ 2 ] 9 \u7a4d\u306e\u7d2f\u7a4d \u00b6 from itertools import accumulate import operator B = list ( accumulate ( A , operator . mul )) Example >>> A = [ 3 , 4 , 6 , 2 , 1 , 9 , 0 , 7 , 5 , 8 ] >>> list ( accumulate ( A , operator . mul )) [ 3 , 12 , 72 , 144 , 144 , 1296 , 0 , 0 , 0 , 0 ] \u6700\u5927\u5024\u306e\u7d2f\u7a4d \u00b6 from itertools import accumulate B = list ( accumulate ( A , max )) Example >>> A = [ 3 , 4 , 6 , 2 , 1 , 9 , 0 , 7 , 5 , 8 ] >>> list ( accumulate ( A , max )) >>> [ 3 , 4 , 6 , 6 , 6 , 9 , 9 , 9 , 9 , 9 ] XOR\u306e\u7d2f\u7a4d \u00b6 from itertools import accumulate import operator B = list ( accumulate ( A , operator . xor ))","title":"\u7d2f\u7a4d\u548c"},{"location":"basic/accumulation/#_1","text":"from itertools import accumulate B = list ( accumulate ( A ))","title":"\u7d2f\u7a4d\u548c"},{"location":"basic/accumulation/#_2","text":"\u7d2f\u7a4d\u548c B B \u3092\u7528\u3044\u3066\u533a\u9593 [L,R] [L,R] \u306e\u548c\u3092 B[R+1]-S[L] B[R+1]-S[L] \u3067\u6c42\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u308b Example >>> A = [ 3 , 4 , 6 , 2 , 1 , 9 , 0 , 7 , 5 , 8 ] >>> B = [ 0 ] + list ( accumulate ( A )) [ 0 , 3 , 7 , 13 , 15 , 16 , 25 , 25 , 32 , 37 , 45 ] >>> # \u533a\u9593[2, 4](A[2]=6, A[3]=2, A[4]=1)\u306e\u548c\u3092\u6c42\u3081\u308b >>> B [ 4 + 1 ] - B [ 2 ] 9","title":"\u533a\u9593\u306e\u7dcf\u548c"},{"location":"basic/accumulation/#_3","text":"from itertools import accumulate import operator B = list ( accumulate ( A , operator . mul )) Example >>> A = [ 3 , 4 , 6 , 2 , 1 , 9 , 0 , 7 , 5 , 8 ] >>> list ( accumulate ( A , operator . mul )) [ 3 , 12 , 72 , 144 , 144 , 1296 , 0 , 0 , 0 , 0 ]","title":"\u7a4d\u306e\u7d2f\u7a4d"},{"location":"basic/accumulation/#_4","text":"from itertools import accumulate B = list ( accumulate ( A , max )) Example >>> A = [ 3 , 4 , 6 , 2 , 1 , 9 , 0 , 7 , 5 , 8 ] >>> list ( accumulate ( A , max )) >>> [ 3 , 4 , 6 , 6 , 6 , 9 , 9 , 9 , 9 , 9 ]","title":"\u6700\u5927\u5024\u306e\u7d2f\u7a4d"},{"location":"basic/accumulation/#xor","text":"from itertools import accumulate import operator B = list ( accumulate ( A , operator . xor ))","title":"XOR\u306e\u7d2f\u7a4d"},{"location":"basic/combinatorics/","text":"\u7d44\u5408\u305b\u8ad6 \u00b6 \u9806\u5217 \u00b6 \u914d\u5217 A \u304b\u3089 k \u500b\u3092\u9078\u3076\u9806\u5217\u306e\u30ea\u30b9\u30c8 from itertools import permutations permutations ( A , k ) \u7d44\u5408\u305b \u00b6 \u914d\u5217 A \u304b\u3089 k \u500b\u3092\u9078\u3076\u7d44\u307f\u5408\u308f\u305b\u306e\u30ea\u30b9\u30c8 from itertools import combinations combinations ( A , k ) \u914d\u5217 A \u304b\u3089\u91cd\u8907\u3092\u8a31\u3057\u3066 k \u500b\u3092\u9078\u3076\u7d44\u307f\u5408\u308f\u305b\u306e\u30ea\u30b9\u30c8 from itertools import combinations_with_replacement combinations_with_replacement ( A , k ) n \u500b\u304b\u3089 k \u500b\u3092\u9078\u3076\u7d44\u307f\u5408\u308f\u305b\u6570\uff08nCk\uff09 from scipy.special import comb comb ( n , k , exact = True ) Note n=10^4 n=10^4 \u3067200ms\u7a0b\u5ea6, n=10^5 n=10^5 \u30672sec\u7a0b\u5ea6 n \u500b\u304b\u3089\u91cd\u8907\u3092\u8a31\u3057\u3066 k \u500b\u3092\u9078\u3076\u7d44\u307f\u5408\u308f\u305b\u6570 from scipy.special import comb comb ( n , k , exact = True , repetition = True ) # n\u500b\u304b\u3089n + k - 1\u500b\u3092\u9078\u3076\u7d44\u307f\u5408\u308f\u305b\u6570\u3068\u7b49\u3057\u3044 comb ( n + k - 1 , k , exact = True ) \u30d5\u30a7\u30eb\u30de\u30fc\u306e\u5c0f\u5b9a\u7406\u3092\u7528\u3044\u305f\u4e8c\u9805\u4fc2\u6570\u306e\u8a08\u7b97 \u968e\u4e57 \u00b6 # \u968e\u4e57 from math import factorial factorial ( x ) # \u968e\u4e57\u30c6\u30fc\u30d6\u30eb fac = [ 1 ] * N for i in range ( 1 , N ): fac [ i ] = ( fac [ i - 1 ] * i ) % mod # \u9006\u5143\u30c6\u30fc\u30d6\u30eb inv = [ 1 ] * N inv [ N - 1 ] = pow ( fac [ N - 1 ], mod - 2 , mod ) for i in range ( N - 1 , 0 , - 1 ): inv [ i - 1 ] = ( inv [ i ] * i ) % mod mod \u00b6 mod\u7a7a\u9593\u306b\u304a\u3044\u3066\u52a0\u7b97\u3001\u6e1b\u7b97\u3001\u4e57\u7b97\u306f\u901a\u5e38\u306e\u56db\u5247\u6f14\u7b97\u3068\u540c\u3058\u3060\u304c\u3001\u9664\u7b97\u306f\u9006\u5143\u306e\u7a4d\u3092\u3068\u308b a // b % mod \u3067\u306f\u306a\u304f pow(b, mod - 2, mod) \u3092\u7528\u3044\u308b","title":"\u7d44\u5408\u305b\u8ad6"},{"location":"basic/combinatorics/#_1","text":"","title":"\u7d44\u5408\u305b\u8ad6"},{"location":"basic/combinatorics/#_2","text":"\u914d\u5217 A \u304b\u3089 k \u500b\u3092\u9078\u3076\u9806\u5217\u306e\u30ea\u30b9\u30c8 from itertools import permutations permutations ( A , k )","title":"\u9806\u5217"},{"location":"basic/combinatorics/#_3","text":"\u914d\u5217 A \u304b\u3089 k \u500b\u3092\u9078\u3076\u7d44\u307f\u5408\u308f\u305b\u306e\u30ea\u30b9\u30c8 from itertools import combinations combinations ( A , k ) \u914d\u5217 A \u304b\u3089\u91cd\u8907\u3092\u8a31\u3057\u3066 k \u500b\u3092\u9078\u3076\u7d44\u307f\u5408\u308f\u305b\u306e\u30ea\u30b9\u30c8 from itertools import combinations_with_replacement combinations_with_replacement ( A , k ) n \u500b\u304b\u3089 k \u500b\u3092\u9078\u3076\u7d44\u307f\u5408\u308f\u305b\u6570\uff08nCk\uff09 from scipy.special import comb comb ( n , k , exact = True ) Note n=10^4 n=10^4 \u3067200ms\u7a0b\u5ea6, n=10^5 n=10^5 \u30672sec\u7a0b\u5ea6 n \u500b\u304b\u3089\u91cd\u8907\u3092\u8a31\u3057\u3066 k \u500b\u3092\u9078\u3076\u7d44\u307f\u5408\u308f\u305b\u6570 from scipy.special import comb comb ( n , k , exact = True , repetition = True ) # n\u500b\u304b\u3089n + k - 1\u500b\u3092\u9078\u3076\u7d44\u307f\u5408\u308f\u305b\u6570\u3068\u7b49\u3057\u3044 comb ( n + k - 1 , k , exact = True ) \u30d5\u30a7\u30eb\u30de\u30fc\u306e\u5c0f\u5b9a\u7406\u3092\u7528\u3044\u305f\u4e8c\u9805\u4fc2\u6570\u306e\u8a08\u7b97","title":"\u7d44\u5408\u305b"},{"location":"basic/combinatorics/#_4","text":"# \u968e\u4e57 from math import factorial factorial ( x ) # \u968e\u4e57\u30c6\u30fc\u30d6\u30eb fac = [ 1 ] * N for i in range ( 1 , N ): fac [ i ] = ( fac [ i - 1 ] * i ) % mod # \u9006\u5143\u30c6\u30fc\u30d6\u30eb inv = [ 1 ] * N inv [ N - 1 ] = pow ( fac [ N - 1 ], mod - 2 , mod ) for i in range ( N - 1 , 0 , - 1 ): inv [ i - 1 ] = ( inv [ i ] * i ) % mod","title":"\u968e\u4e57"},{"location":"basic/combinatorics/#mod","text":"mod\u7a7a\u9593\u306b\u304a\u3044\u3066\u52a0\u7b97\u3001\u6e1b\u7b97\u3001\u4e57\u7b97\u306f\u901a\u5e38\u306e\u56db\u5247\u6f14\u7b97\u3068\u540c\u3058\u3060\u304c\u3001\u9664\u7b97\u306f\u9006\u5143\u306e\u7a4d\u3092\u3068\u308b a // b % mod \u3067\u306f\u306a\u304f pow(b, mod - 2, mod) \u3092\u7528\u3044\u308b","title":"mod"},{"location":"basic/data_structures/","text":"\u30c7\u30fc\u30bf\u69cb\u9020 \u00b6 \u30ea\u30b9\u30c8 \u00b6 \u30ea\u30b9\u30c8\u306e\u521d\u671f\u5316 \u00b6 x[N][M] x = [[ None ] * M for _ in range ( N )] Note \u591a\u91cd\u30ea\u30b9\u30c8\u306f\u5185\u5305\u8868\u8a18\u3067\u521d\u671f\u5316\u3059\u308b \u591a\u91cd\u30ea\u30b9\u30c8\u306e\u30eb\u30fc\u30d7 \u00b6 product \u3092\u4f7f\u3046\u3068\u77ed\u304f\u66f8\u3051\u308b from itertools import product Example >>> from itertools import product >>> for p in product ([ 0 , 1 ], repeat = 3 ): ... print ( p ) ... ( 0 , 0 , 0 ) ( 0 , 0 , 1 ) ( 0 , 1 , 0 ) ( 0 , 1 , 1 ) ( 1 , 0 , 0 ) ( 1 , 0 , 1 ) ( 1 , 1 , 0 ) ( 1 , 1 , 1 ) 2\u6b21\u5143\u30ea\u30b9\u30c8\u3092flatten\uff081\u6b21\u5143\uff09\u306b\u5909\u63db\u3059\u308b \u00b6 [ x for l in A for x in l ] Example >>> A = [[ 0 , 1 ], [ 2 , 3 ]] >>> [ x for l in A for x in l ] [ 0 , 1 , 2 , 3 ] \u8f9e\u66f8 \u00b6 \u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3092\u6301\u3064\u8f9e\u66f8\u306e\u521d\u671f\u5316 \u00b6 from collections import defaultdict Example \u5f15\u6570\u306b int \u3092\u6307\u5b9a\u3059\u308b\u3068\u3001key\u306f\u3059\u3079\u30660\u3067\u521d\u671f\u5316\u3055\u308c\u308b\u3002 >>> d = defaultdict ( int ) >>> d [ \"key\" ] += 1 >>> d defaultdict ( < class ' int '>, {' key ': 1}) Example \u5f15\u6570\u306b lambda \u3092\u7528\u3044\u3066\u4efb\u610f\u306e\u5024\u3092\u6307\u5b9a\u3067\u304d\u308b\u3002 >>> d = defaultdict ( lambda : 1 ) >>> d [ \"key\" ] += 1 >>> d defaultdict ( < function < lambda > at 0x10bffe5e0 > , { 'key' : 2 }) \u8f9e\u66f8\u306e\u30bd\u30fc\u30c8 \u00b6 itemgetter \u3092\u4f7f\u7528\u3059\u308b\u307b\u3046\u304c lambda \u3088\u308a\u82e5\u5e72\u9ad8\u901f\u3067\u3042\u308b\u3002 from operator import itemgetter sorted ( x , key = itemgetter ( 0 )) Example >>> from operator import itemgetter >>> x = { \"a\" : 2 , \"b\" : 1 } # key >>> sorted ( x , key = itemgetter ( 0 )) [( 'a' , 2 ), ( 'b' , 1 )] # value >>> sorted ( x , key = itemgetter ( 1 )) [( 'b' , 1 ), ( 'a' , 2 )] \u8981\u7d20\u306e\u6570\u3048\u4e0a\u3052 \u00b6 from collections import Counter Example >>> A = [ \"a\" , \"b\" , \"c\" , \"a\" ] >>> Counter ( A ) Counter ({ 'a' : 2 , 'b' : 1 , 'c' : 1 }) \u96c6\u5408 \u00b6 x in set \u91cd\u8907\u3092\u542b\u307e\u306a\u3044\u8981\u7d20\u306e\u63a2\u7d22\u306e\u5834\u5408\u306f set \u3092\u4f7f\u3046\u307b\u3046\u304c\u9ad8\u901f\u3067\u3042\u308b\u3002 list : O(N) O(N) set : O(1) O(1) \u30ad\u30e5\u30fc \u00b6 from collections import deque que = deque () \u512a\u5148\u5ea6\u4ed8\u304d\u30ad\u30e5\u30fc \u00b6 heappush: O(log{N}) O(log{N}) heappop: O(1) O(1) \u6700\u5c0f\u30d2\u30fc\u30d7 \u00b6 from heapq import heappop , heappush que = [] heappush ( que , v ) v = heappop ( que ) \u6700\u5927\u30d2\u30fc\u30d7 \u00b6 from heapq import heappop , heappush que = [] heappush ( que , v * - 1 ) v = heappop ( que ) * - 1","title":"\u30c7\u30fc\u30bf\u69cb\u9020"},{"location":"basic/data_structures/#_1","text":"","title":"\u30c7\u30fc\u30bf\u69cb\u9020"},{"location":"basic/data_structures/#_2","text":"","title":"\u30ea\u30b9\u30c8"},{"location":"basic/data_structures/#_3","text":"x[N][M] x = [[ None ] * M for _ in range ( N )] Note \u591a\u91cd\u30ea\u30b9\u30c8\u306f\u5185\u5305\u8868\u8a18\u3067\u521d\u671f\u5316\u3059\u308b","title":"\u30ea\u30b9\u30c8\u306e\u521d\u671f\u5316"},{"location":"basic/data_structures/#_4","text":"product \u3092\u4f7f\u3046\u3068\u77ed\u304f\u66f8\u3051\u308b from itertools import product Example >>> from itertools import product >>> for p in product ([ 0 , 1 ], repeat = 3 ): ... print ( p ) ... ( 0 , 0 , 0 ) ( 0 , 0 , 1 ) ( 0 , 1 , 0 ) ( 0 , 1 , 1 ) ( 1 , 0 , 0 ) ( 1 , 0 , 1 ) ( 1 , 1 , 0 ) ( 1 , 1 , 1 )","title":"\u591a\u91cd\u30ea\u30b9\u30c8\u306e\u30eb\u30fc\u30d7"},{"location":"basic/data_structures/#2flatten1","text":"[ x for l in A for x in l ] Example >>> A = [[ 0 , 1 ], [ 2 , 3 ]] >>> [ x for l in A for x in l ] [ 0 , 1 , 2 , 3 ]","title":"2\u6b21\u5143\u30ea\u30b9\u30c8\u3092flatten\uff081\u6b21\u5143\uff09\u306b\u5909\u63db\u3059\u308b"},{"location":"basic/data_structures/#_5","text":"","title":"\u8f9e\u66f8"},{"location":"basic/data_structures/#_6","text":"from collections import defaultdict Example \u5f15\u6570\u306b int \u3092\u6307\u5b9a\u3059\u308b\u3068\u3001key\u306f\u3059\u3079\u30660\u3067\u521d\u671f\u5316\u3055\u308c\u308b\u3002 >>> d = defaultdict ( int ) >>> d [ \"key\" ] += 1 >>> d defaultdict ( < class ' int '>, {' key ': 1}) Example \u5f15\u6570\u306b lambda \u3092\u7528\u3044\u3066\u4efb\u610f\u306e\u5024\u3092\u6307\u5b9a\u3067\u304d\u308b\u3002 >>> d = defaultdict ( lambda : 1 ) >>> d [ \"key\" ] += 1 >>> d defaultdict ( < function < lambda > at 0x10bffe5e0 > , { 'key' : 2 })","title":"\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3092\u6301\u3064\u8f9e\u66f8\u306e\u521d\u671f\u5316"},{"location":"basic/data_structures/#_7","text":"itemgetter \u3092\u4f7f\u7528\u3059\u308b\u307b\u3046\u304c lambda \u3088\u308a\u82e5\u5e72\u9ad8\u901f\u3067\u3042\u308b\u3002 from operator import itemgetter sorted ( x , key = itemgetter ( 0 )) Example >>> from operator import itemgetter >>> x = { \"a\" : 2 , \"b\" : 1 } # key >>> sorted ( x , key = itemgetter ( 0 )) [( 'a' , 2 ), ( 'b' , 1 )] # value >>> sorted ( x , key = itemgetter ( 1 )) [( 'b' , 1 ), ( 'a' , 2 )]","title":"\u8f9e\u66f8\u306e\u30bd\u30fc\u30c8"},{"location":"basic/data_structures/#_8","text":"from collections import Counter Example >>> A = [ \"a\" , \"b\" , \"c\" , \"a\" ] >>> Counter ( A ) Counter ({ 'a' : 2 , 'b' : 1 , 'c' : 1 })","title":"\u8981\u7d20\u306e\u6570\u3048\u4e0a\u3052"},{"location":"basic/data_structures/#_9","text":"x in set \u91cd\u8907\u3092\u542b\u307e\u306a\u3044\u8981\u7d20\u306e\u63a2\u7d22\u306e\u5834\u5408\u306f set \u3092\u4f7f\u3046\u307b\u3046\u304c\u9ad8\u901f\u3067\u3042\u308b\u3002 list : O(N) O(N) set : O(1) O(1)","title":"\u96c6\u5408"},{"location":"basic/data_structures/#_10","text":"from collections import deque que = deque ()","title":"\u30ad\u30e5\u30fc"},{"location":"basic/data_structures/#_11","text":"heappush: O(log{N}) O(log{N}) heappop: O(1) O(1)","title":"\u512a\u5148\u5ea6\u4ed8\u304d\u30ad\u30e5\u30fc"},{"location":"basic/data_structures/#_12","text":"from heapq import heappop , heappush que = [] heappush ( que , v ) v = heappop ( que )","title":"\u6700\u5c0f\u30d2\u30fc\u30d7"},{"location":"basic/data_structures/#_13","text":"from heapq import heappop , heappush que = [] heappush ( que , v * - 1 ) v = heappop ( que ) * - 1","title":"\u6700\u5927\u30d2\u30fc\u30d7"},{"location":"basic/other/","text":"\u305d\u306e\u4ed6 \u00b6 \u9ad8\u901f\u5316 \u00b6 Python\u3067TLE\u306e\u5834\u5408\u3001pypy\u3067\u5b9f\u884c\u3057\u3066\u307f\u308b\u3002 \u30e1\u30e2\u5316 \u00b6 from functools import lru_cache @lru_cache ( maxsize = None ) def f ( n ): pass \u518d\u5e30\u56de\u6570\u306e\u4e0a\u9650 \u00b6 \u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f1000\u56de\u307e\u3067\u3067\u3042\u308b\u3002 \u518d\u5e30\u95a2\u6570\u3092\u7528\u3044\u3066\u3044\u308b\u3068\u304d RE \u306b\u306a\u3063\u305f\u5834\u5408\u306f\u4e0a\u9650\u3092\u4e0a\u3052\u3066\u307f\u308b\u3002 import sys sys . setrecursionlimit ( 10 ** 6 ) \u6587\u5b57\u5217 \u00b6 \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8 \u00b6 import string alphabet = string . ascii_lowercase \u4ee5\u4e0b\u3068\u540c\u3058 alphabet = \"abcdefghijklmnopqrstuvwxyz\" \u5927\u6587\u5b57\u306b\u5909\u63db \u00b6 s . upper () \u5c0f\u6587\u5b57\u306b\u5909\u63db \u00b6 s . lower ()","title":"\u305d\u306e\u4ed6"},{"location":"basic/other/#_1","text":"","title":"\u305d\u306e\u4ed6"},{"location":"basic/other/#_2","text":"Python\u3067TLE\u306e\u5834\u5408\u3001pypy\u3067\u5b9f\u884c\u3057\u3066\u307f\u308b\u3002","title":"\u9ad8\u901f\u5316"},{"location":"basic/other/#_3","text":"from functools import lru_cache @lru_cache ( maxsize = None ) def f ( n ): pass","title":"\u30e1\u30e2\u5316"},{"location":"basic/other/#_4","text":"\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f1000\u56de\u307e\u3067\u3067\u3042\u308b\u3002 \u518d\u5e30\u95a2\u6570\u3092\u7528\u3044\u3066\u3044\u308b\u3068\u304d RE \u306b\u306a\u3063\u305f\u5834\u5408\u306f\u4e0a\u9650\u3092\u4e0a\u3052\u3066\u307f\u308b\u3002 import sys sys . setrecursionlimit ( 10 ** 6 )","title":"\u518d\u5e30\u56de\u6570\u306e\u4e0a\u9650"},{"location":"basic/other/#_5","text":"","title":"\u6587\u5b57\u5217"},{"location":"basic/other/#_6","text":"import string alphabet = string . ascii_lowercase \u4ee5\u4e0b\u3068\u540c\u3058 alphabet = \"abcdefghijklmnopqrstuvwxyz\"","title":"\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8"},{"location":"basic/other/#_7","text":"s . upper ()","title":"\u5927\u6587\u5b57\u306b\u5909\u63db"},{"location":"basic/other/#_8","text":"s . lower ()","title":"\u5c0f\u6587\u5b57\u306b\u5909\u63db"},{"location":"basic/stdin/","text":"\u5165\u51fa\u529b \u00b6 \u6a19\u6e96\u5165\u529b\u3067\u306e\u5b9f\u884c\u65b9\u6cd5 \u00b6 \u30d5\u30a1\u30a4\u30eb\u304b\u3089\u6a19\u6e96\u5165\u529b\u3092\u53d7\u3051\u53d6\u308b python main.py < input.txt cat input.txt | python main.py \u3088\u304f\u4f7f\u3046\u6a19\u6e96\u5165\u529b \u00b6 \u6587\u5b57\u5217 \u00b6 string S = input () \u6570\u5b57 \u00b6 1 N = int ( input ()) \u8907\u6570\u306e\u6570\u5b57 \u00b6 \u5225\u3005\u306e\u5909\u6570 \u00b6 10 5 N , K = map ( int , input () . split ()) 1\u3064\u306e\u5909\u6570\uff08\u30ea\u30b9\u30c8\uff09 \u00b6 1 2 3 4 5 A = [ int ( x ) for x in input () . split ()] A = list ( map ( int , input () . split ())) \u8907\u6570\u884c\u306e\u6587\u5b57\u5217 \u00b6 #..# ..## S = [ list ( input ()) for _ in range ( H )] Example >>> print ( S ) [[ '#' , '.' , '.' , '#' ], [ '.' , '.' , '#' , '#' ]] \u8907\u6570\u884c\u306e\u6570\u5b57 \u00b6 1 2 3 A = [ int ( input ()) for _ in range ( N )] \u8907\u6570\u884c\u306b\u8907\u6570\u306e\u6570\u5b57 \u00b6 1 4 2 5 3 6 1\u3064\u306e2\u6b21\u5143\u30ea\u30b9\u30c8 \u00b6 A = [[ int ( x ) for x in input () . split ()] for _ in range ( H )] Example >>> print ( A ) [[ 1 , 4 ], [ 2 , 5 ], [ 3 , 6 ]] \u5225\u3005\u306e1\u6b21\u5143\u30ea\u30b9\u30c8 \u00b6 a , b = [ None ] * N , [ None ] * N for i in range ( N ): a [ i ], b [ i ] = map ( int , input () . split ()) Example >>> print ( a ) [ 1 , 2 , 3 ] >>> print ( b ) [ 4 , 5 , 6 ] \u6a19\u6e96\u5165\u529b\u306e\u9ad8\u901f\u5316 \u00b6 import sys input = sys . stdin . readline Note 10^6 10^6 \u306e\u3068\u304d\u3001392ms\u304b\u308937ms\u306b10\u500d\u4ee5\u4e0a\u306e\u9ad8\u901f\u5316\u304c\u3067\u304d\u308b \u30ea\u30b9\u30c8\u306e\u51fa\u529b \u00b6 \u30ea\u30b9\u30c8\u3092\u7a7a\u767d\u533a\u5207\u308a\u3084\u6539\u884c\u533a\u5207\u308a\u3067\u51fa\u529b\u3059\u308b\u969b\u3001\u30a2\u30f3\u30d1\u30c3\u30af\u3092\u7528\u3044\u308b\u3068\u7c21\u5358\u306b\u51fa\u529b\u3067\u304d\u308b print ( * a ) Example >>> a = [ 1 , 2 , 3 ] >>> print ( * a ) 1 2 3 >>> print ( * a , sep = \" \\n \" ) 1 2 3","title":"\u5165\u51fa\u529b"},{"location":"basic/stdin/#_1","text":"","title":"\u5165\u51fa\u529b"},{"location":"basic/stdin/#_2","text":"\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u6a19\u6e96\u5165\u529b\u3092\u53d7\u3051\u53d6\u308b python main.py < input.txt cat input.txt | python main.py","title":"\u6a19\u6e96\u5165\u529b\u3067\u306e\u5b9f\u884c\u65b9\u6cd5"},{"location":"basic/stdin/#_3","text":"","title":"\u3088\u304f\u4f7f\u3046\u6a19\u6e96\u5165\u529b"},{"location":"basic/stdin/#_4","text":"string S = input ()","title":"\u6587\u5b57\u5217"},{"location":"basic/stdin/#_5","text":"1 N = int ( input ())","title":"\u6570\u5b57"},{"location":"basic/stdin/#_6","text":"","title":"\u8907\u6570\u306e\u6570\u5b57"},{"location":"basic/stdin/#_7","text":"10 5 N , K = map ( int , input () . split ())","title":"\u5225\u3005\u306e\u5909\u6570"},{"location":"basic/stdin/#1","text":"1 2 3 4 5 A = [ int ( x ) for x in input () . split ()] A = list ( map ( int , input () . split ()))","title":"1\u3064\u306e\u5909\u6570\uff08\u30ea\u30b9\u30c8\uff09"},{"location":"basic/stdin/#_8","text":"#..# ..## S = [ list ( input ()) for _ in range ( H )] Example >>> print ( S ) [[ '#' , '.' , '.' , '#' ], [ '.' , '.' , '#' , '#' ]]","title":"\u8907\u6570\u884c\u306e\u6587\u5b57\u5217"},{"location":"basic/stdin/#_9","text":"1 2 3 A = [ int ( input ()) for _ in range ( N )]","title":"\u8907\u6570\u884c\u306e\u6570\u5b57"},{"location":"basic/stdin/#_10","text":"1 4 2 5 3 6","title":"\u8907\u6570\u884c\u306b\u8907\u6570\u306e\u6570\u5b57"},{"location":"basic/stdin/#12","text":"A = [[ int ( x ) for x in input () . split ()] for _ in range ( H )] Example >>> print ( A ) [[ 1 , 4 ], [ 2 , 5 ], [ 3 , 6 ]]","title":"1\u3064\u306e2\u6b21\u5143\u30ea\u30b9\u30c8"},{"location":"basic/stdin/#1_1","text":"a , b = [ None ] * N , [ None ] * N for i in range ( N ): a [ i ], b [ i ] = map ( int , input () . split ()) Example >>> print ( a ) [ 1 , 2 , 3 ] >>> print ( b ) [ 4 , 5 , 6 ]","title":"\u5225\u3005\u306e1\u6b21\u5143\u30ea\u30b9\u30c8"},{"location":"basic/stdin/#_11","text":"import sys input = sys . stdin . readline Note 10^6 10^6 \u306e\u3068\u304d\u3001392ms\u304b\u308937ms\u306b10\u500d\u4ee5\u4e0a\u306e\u9ad8\u901f\u5316\u304c\u3067\u304d\u308b","title":"\u6a19\u6e96\u5165\u529b\u306e\u9ad8\u901f\u5316"},{"location":"basic/stdin/#_12","text":"\u30ea\u30b9\u30c8\u3092\u7a7a\u767d\u533a\u5207\u308a\u3084\u6539\u884c\u533a\u5207\u308a\u3067\u51fa\u529b\u3059\u308b\u969b\u3001\u30a2\u30f3\u30d1\u30c3\u30af\u3092\u7528\u3044\u308b\u3068\u7c21\u5358\u306b\u51fa\u529b\u3067\u304d\u308b print ( * a ) Example >>> a = [ 1 , 2 , 3 ] >>> print ( * a ) 1 2 3 >>> print ( * a , sep = \" \\n \" ) 1 2 3","title":"\u30ea\u30b9\u30c8\u306e\u51fa\u529b"},{"location":"leetcode/1310/","text":"LeetCode 1310. XOR Queries of a Subarray \u00b6 https://leetcode.com/problems/xor-queries-of-a-subarray/ \u554f\u984c\u6982\u8981 \u00b6 \u6b63\u306e\u6574\u6570\u306e\u914d\u5217 arr \u3068\u30af\u30a8\u30ea\u306e\u914d\u5217 queries \uff08 queries[i] = [Li, Ri] \uff09\u304c\u4e0e\u3048\u3089\u308c\u308b \u305d\u308c\u305e\u308c\u306e\u30af\u30a8\u30ea\u306b\u5bfe\u3057\u3066\u3001 arr \u306e Li \u304b\u3089 Ri \u307e\u3067\u306e\u8981\u7d20\u304b\u3089\u6210\u308b\u90e8\u5206\u5217\u306eXOR\u3092\u6c42\u3081\u3088 \u5236\u7d04: 1 <= arr.length <= 3 * 10^4 1 <= queries.length <= 3 * 10^4 Example \u00b6 Input: arr = [1,3,4,8], queries = [[0,1],[1,2],[0,3],[3,3]] Output: [2,7,14,8] \u30b3\u30fc\u30c9\u3068\u89e3\u8aac \u00b6 \u30af\u30a8\u30ea\u3054\u3068\u306b\u5358\u7d14\u306bXOR\u3092\u6c42\u3081\u308b\u3068\u3001 arr.length * queries.length \u304b\u304b\u308b\u306e\u3067\u9593\u306b\u5408\u3044\u307e\u305b\u3093\u3002 \u4e88\u3081 arr \u306b\u5bfe\u3057\u3066\u7d2f\u7a4dXOR\u3092\u6c42\u3081\u3066\u304a\u304d\u3001\u30af\u30a8\u30ea\u3054\u3068\u306b\u90e8\u5206\u5217\u306eXOR\u3092\u53d6\u308a\u51fa\u3057\u307e\u3059\u3002 from itertools import accumulate import operator class Solution : def xorQueries ( self , arr : List [ int ], queries : List [ List [ int ]]) -> List [ int ]: # \u7d2f\u7a4dXOR\u3092\u6c42\u3081\u308b O(N) acc = [ 0 ] + list ( accumulate ( arr , operator . xor )) out = [] for l , r in queries : # \u90e8\u5206\u5217\u306eXOR\u3092\u6c42\u3081\u308b O(1) x = acc [ l ] ^ acc [ r + 1 ] out . append ( x ) return out","title":"LeetCode 1310. XOR Queries of a Subarray"},{"location":"leetcode/1310/#leetcode-1310-xor-queries-of-a-subarray","text":"https://leetcode.com/problems/xor-queries-of-a-subarray/","title":"LeetCode 1310. XOR Queries of a Subarray"},{"location":"leetcode/1310/#_1","text":"\u6b63\u306e\u6574\u6570\u306e\u914d\u5217 arr \u3068\u30af\u30a8\u30ea\u306e\u914d\u5217 queries \uff08 queries[i] = [Li, Ri] \uff09\u304c\u4e0e\u3048\u3089\u308c\u308b \u305d\u308c\u305e\u308c\u306e\u30af\u30a8\u30ea\u306b\u5bfe\u3057\u3066\u3001 arr \u306e Li \u304b\u3089 Ri \u307e\u3067\u306e\u8981\u7d20\u304b\u3089\u6210\u308b\u90e8\u5206\u5217\u306eXOR\u3092\u6c42\u3081\u3088 \u5236\u7d04: 1 <= arr.length <= 3 * 10^4 1 <= queries.length <= 3 * 10^4","title":"\u554f\u984c\u6982\u8981"},{"location":"leetcode/1310/#example","text":"Input: arr = [1,3,4,8], queries = [[0,1],[1,2],[0,3],[3,3]] Output: [2,7,14,8]","title":"Example"},{"location":"leetcode/1310/#_2","text":"\u30af\u30a8\u30ea\u3054\u3068\u306b\u5358\u7d14\u306bXOR\u3092\u6c42\u3081\u308b\u3068\u3001 arr.length * queries.length \u304b\u304b\u308b\u306e\u3067\u9593\u306b\u5408\u3044\u307e\u305b\u3093\u3002 \u4e88\u3081 arr \u306b\u5bfe\u3057\u3066\u7d2f\u7a4dXOR\u3092\u6c42\u3081\u3066\u304a\u304d\u3001\u30af\u30a8\u30ea\u3054\u3068\u306b\u90e8\u5206\u5217\u306eXOR\u3092\u53d6\u308a\u51fa\u3057\u307e\u3059\u3002 from itertools import accumulate import operator class Solution : def xorQueries ( self , arr : List [ int ], queries : List [ List [ int ]]) -> List [ int ]: # \u7d2f\u7a4dXOR\u3092\u6c42\u3081\u308b O(N) acc = [ 0 ] + list ( accumulate ( arr , operator . xor )) out = [] for l , r in queries : # \u90e8\u5206\u5217\u306eXOR\u3092\u6c42\u3081\u308b O(1) x = acc [ l ] ^ acc [ r + 1 ] out . append ( x ) return out","title":"\u30b3\u30fc\u30c9\u3068\u89e3\u8aac"},{"location":"leetcode/1312/","text":"LeetCode 1312. Minimum Insertion Steps to Make a String Palindrome \u00b6 https://leetcode.com/problems/minimum-insertion-steps-to-make-a-string-palindrome/ \u554f\u984c\u6982\u8981 \u00b6 \u6587\u5b57\u5217 s \u304c\u4e0e\u3048\u3089\u308c\u3001\u6587\u5b57\u3092\u8ffd\u52a0\u3057\u3066\u56de\u6587\u3092\u4f5c\u308b\u3068\u304d\u3001\u6700\u5c0f\u3067\u4f55\u6587\u5b57\u8ffd\u52a0\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u304b\u6c42\u3081\u3088 \u6587\u5b57\u306f\u597d\u304d\u306a\u5834\u6240\u3001\u597d\u304d\u306a\u6587\u5b57\uff08\u5c0f\u6587\u5b57\u306e\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\uff09\u3092\u8ffd\u52a0\u3057\u3066\u826f\u3044 \u5236\u7d04: 1 <= s.length <= 500 \u30b3\u30fc\u30c9\u3068\u89e3\u8aac \u00b6 from functools import lru_cache class Solution : def minInsertions ( self , s : str ) -> int : ans = self . f ( s , 0 , len ( s ) - 1 ) return ans @lru_cache ( maxsize = 1000 ) def f ( self , string , left , right ): if left == right : return 0 if left == right - 1 : if string [ left ] == string [ right ]: return 0 else : return 1 if string [ left ] == string [ right ]: return self . f ( string , left + 1 , right - 1 ) else : return min ( self . f ( string , left + 1 , right ), self . f ( string , left , right - 1 )) + 1","title":"LeetCode 1312. Minimum Insertion Steps to Make a String Palindrome"},{"location":"leetcode/1312/#leetcode-1312-minimum-insertion-steps-to-make-a-string-palindrome","text":"https://leetcode.com/problems/minimum-insertion-steps-to-make-a-string-palindrome/","title":"LeetCode 1312. Minimum Insertion Steps to Make a String Palindrome"},{"location":"leetcode/1312/#_1","text":"\u6587\u5b57\u5217 s \u304c\u4e0e\u3048\u3089\u308c\u3001\u6587\u5b57\u3092\u8ffd\u52a0\u3057\u3066\u56de\u6587\u3092\u4f5c\u308b\u3068\u304d\u3001\u6700\u5c0f\u3067\u4f55\u6587\u5b57\u8ffd\u52a0\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u304b\u6c42\u3081\u3088 \u6587\u5b57\u306f\u597d\u304d\u306a\u5834\u6240\u3001\u597d\u304d\u306a\u6587\u5b57\uff08\u5c0f\u6587\u5b57\u306e\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\uff09\u3092\u8ffd\u52a0\u3057\u3066\u826f\u3044 \u5236\u7d04: 1 <= s.length <= 500","title":"\u554f\u984c\u6982\u8981"},{"location":"leetcode/1312/#_2","text":"from functools import lru_cache class Solution : def minInsertions ( self , s : str ) -> int : ans = self . f ( s , 0 , len ( s ) - 1 ) return ans @lru_cache ( maxsize = 1000 ) def f ( self , string , left , right ): if left == right : return 0 if left == right - 1 : if string [ left ] == string [ right ]: return 0 else : return 1 if string [ left ] == string [ right ]: return self . f ( string , left + 1 , right - 1 ) else : return min ( self . f ( string , left + 1 , right ), self . f ( string , left , right - 1 )) + 1","title":"\u30b3\u30fc\u30c9\u3068\u89e3\u8aac"}]}