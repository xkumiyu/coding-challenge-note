{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Coding Challenge Note for Pythonists \u00b6 Basic \u00b6 \u6a19\u6e96\u5165\u529b \u30c7\u30fc\u30bf\u69cb\u9020 \u7d44\u5408\u305b\u8ad6 Algorithms \u00b6 Graph Theory \u00b6 \u6df1\u3055\u512a\u5148\u63a2\u7d22(DFS) \u5e45\u512a\u5148\u63a2\u7d22(BFS) \u30c0\u30a4\u30af\u30b9\u30c8\u30e9\u6cd5 Number Theory \u00b6 \u7d04\u6570 Data Structure \u00b6 Union Find","title":"Coding Challenge Note for Pythonists"},{"location":"#coding-challenge-note-for-pythonists","text":"","title":"Coding Challenge Note for Pythonists"},{"location":"#basic","text":"\u6a19\u6e96\u5165\u529b \u30c7\u30fc\u30bf\u69cb\u9020 \u7d44\u5408\u305b\u8ad6","title":"Basic"},{"location":"#algorithms","text":"","title":"Algorithms"},{"location":"#graph-theory","text":"\u6df1\u3055\u512a\u5148\u63a2\u7d22(DFS) \u5e45\u512a\u5148\u63a2\u7d22(BFS) \u30c0\u30a4\u30af\u30b9\u30c8\u30e9\u6cd5","title":"Graph Theory"},{"location":"#number-theory","text":"\u7d04\u6570","title":"Number Theory"},{"location":"#data-structure","text":"Union Find","title":"Data Structure"},{"location":"note/","text":"Coding Challenge NOTE \u00b6 \u7d2f\u7a4d\u548c \u00b6 from itertools import accumulate B = [ x for x in accumulate ( A )] B = list ( accumulate ( A )) \u7d2f\u7a4d\u7a4d import operator B = list ( accumulate ( A , operator . mul )) >>> A = [ 3 , 4 , 6 , 2 , 1 , 9 , 0 , 7 , 5 , 8 ] >>> list ( accumulate ( A , operator . mul )) [ 3 , 12 , 72 , 144 , 144 , 1296 , 0 , 0 , 0 , 0 ] \u7d2f\u7a4dmax B = list ( accumulate ( A , max )) >>> A = [ 3 , 4 , 6 , 2 , 1 , 9 , 0 , 7 , 5 , 8 ] >>> list ( accumulate ( A , max )) >>> [ 3 , 4 , 6 , 6 , 6 , 9 , 9 , 9 , 9 , 9 ] \u7d2f\u7a4dXOR B = list ( accumulate ( A , operator . xor )) \u4e8c\u5206\u63a2\u7d22 \u00b6 from bisect import bisect_left , bisect_right # x \u3068\u7b49\u3057\u3044\u5024\u306e\u63a2\u7d22(index) i = bisect_left ( A , x ) if i != len ( A ) and A [ i ] == x : return i # x \u4ee5\u4e0a\u306e\u5024\u304c\u4f55\u500b\u3042\u308b\u304b(find_ge) n = len ( A ) - bisect_left ( A , x ) mod \u00b6 # b\u3000\u306e\u9006\u5143 # mod\u7a7a\u9593\u3067\u306f\u9664\u7b97\u304c\u9006\u5143\u306e\u7a4d\u306b\u306a\u308b pow ( b , mod - 2 , mod ) # a // b % mod # a * pow(b, mod - 2, mod) % mod # \u304c\u540c\u3058 \u6700\u5927\u516c\u7d04\u6570\u3068\u6700\u5c0f\u516c\u500d\u6570 \u00b6 # \u6700\u5927\u516c\u7d04\u6570, python 3.5 \u304b\u3089 math.gcd from fractions import gcd gcd ( a , b ) # \u6700\u5c0f\u516c\u500d\u6570 def lcm ( a , b ): return a * b // gcd ( a , b ) \u6587\u5b57\u5217 \u00b6 alphabet = 'abcdefghijklmnopqrstuvwxyz' # \u5927\u6587\u5b57/\u5c0f\u6587\u5b57\u306b\u5909\u63db S . upper () S . lower () ceil \u00b6 # math.ceil(x / y) \u3068\u540c\u3058 - ( - x // y ) def ceil ( x , y ): if x % y == 0 : return x // y else : return x // y + 1 \u6700\u77ed\u7d4c\u8def \u00b6 from scipy.sparse.csgraph import floyd_warshall \u8a08\u7b97\u91cf, \u9ad8\u901f\u5316 \u00b6 python\u3067TLE\u306e\u5834\u5408\u3001pypy\u3092\u8a66\u3057\u3066\u307f\u308b \u30e1\u30e2\u5316 \u00b6 from functools import lru_cache @lru_cache ( maxsize = 1000 ) def f ( n ): pass \u518d\u5e30\u56de\u6570\u306e\u4e0a\u9650 \u00b6 \u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f1000\u56de\u307e\u3067\u3067\u3042\u308b \u518d\u5e30\u95a2\u6570\u3092\u7528\u3044\u3066\u3044\u308b\u3068\u304dRE\u306b\u306a\u3063\u305f\u5834\u5408\u306f\u4e0a\u9650\u3092\u4e0a\u3052\u3066\u307f\u308b import sys sys . setrecursionlimit ( 10 ** 6 ) \u305d\u306e\u4ed6\u6c17\u3092\u3064\u3051\u308b\u3053\u3068 \u00b6 \u30c7\u30d0\u30c3\u30b0\u6642\u306e print \u304c\u306a\u3044\u304b\u78ba\u8a8d\u3059\u308b Yes \u3068 YES \u306a\u3069\u51fa\u529b\u306b\u6c17\u3092\u3064\u3051\u308b \u51fa\u529b\u5f62\u5f0f\u306b\u3082\u6c17\u3092\u3064\u3051\u308b 1\u884c\u3067\u30b9\u30da\u30fc\u30b9\u533a\u5207\u308a\u3068\u304b\u3001\u8907\u6570\u884c\u3068\u304b","title":"Coding Challenge NOTE"},{"location":"note/#coding-challenge-note","text":"","title":"Coding Challenge NOTE"},{"location":"note/#_1","text":"from itertools import accumulate B = [ x for x in accumulate ( A )] B = list ( accumulate ( A )) \u7d2f\u7a4d\u7a4d import operator B = list ( accumulate ( A , operator . mul )) >>> A = [ 3 , 4 , 6 , 2 , 1 , 9 , 0 , 7 , 5 , 8 ] >>> list ( accumulate ( A , operator . mul )) [ 3 , 12 , 72 , 144 , 144 , 1296 , 0 , 0 , 0 , 0 ] \u7d2f\u7a4dmax B = list ( accumulate ( A , max )) >>> A = [ 3 , 4 , 6 , 2 , 1 , 9 , 0 , 7 , 5 , 8 ] >>> list ( accumulate ( A , max )) >>> [ 3 , 4 , 6 , 6 , 6 , 9 , 9 , 9 , 9 , 9 ] \u7d2f\u7a4dXOR B = list ( accumulate ( A , operator . xor ))","title":"\u7d2f\u7a4d\u548c"},{"location":"note/#_2","text":"from bisect import bisect_left , bisect_right # x \u3068\u7b49\u3057\u3044\u5024\u306e\u63a2\u7d22(index) i = bisect_left ( A , x ) if i != len ( A ) and A [ i ] == x : return i # x \u4ee5\u4e0a\u306e\u5024\u304c\u4f55\u500b\u3042\u308b\u304b(find_ge) n = len ( A ) - bisect_left ( A , x )","title":"\u4e8c\u5206\u63a2\u7d22"},{"location":"note/#mod","text":"# b\u3000\u306e\u9006\u5143 # mod\u7a7a\u9593\u3067\u306f\u9664\u7b97\u304c\u9006\u5143\u306e\u7a4d\u306b\u306a\u308b pow ( b , mod - 2 , mod ) # a // b % mod # a * pow(b, mod - 2, mod) % mod # \u304c\u540c\u3058","title":"mod"},{"location":"note/#_3","text":"# \u6700\u5927\u516c\u7d04\u6570, python 3.5 \u304b\u3089 math.gcd from fractions import gcd gcd ( a , b ) # \u6700\u5c0f\u516c\u500d\u6570 def lcm ( a , b ): return a * b // gcd ( a , b )","title":"\u6700\u5927\u516c\u7d04\u6570\u3068\u6700\u5c0f\u516c\u500d\u6570"},{"location":"note/#_4","text":"alphabet = 'abcdefghijklmnopqrstuvwxyz' # \u5927\u6587\u5b57/\u5c0f\u6587\u5b57\u306b\u5909\u63db S . upper () S . lower ()","title":"\u6587\u5b57\u5217"},{"location":"note/#ceil","text":"# math.ceil(x / y) \u3068\u540c\u3058 - ( - x // y ) def ceil ( x , y ): if x % y == 0 : return x // y else : return x // y + 1","title":"ceil"},{"location":"note/#_5","text":"from scipy.sparse.csgraph import floyd_warshall","title":"\u6700\u77ed\u7d4c\u8def"},{"location":"note/#_6","text":"python\u3067TLE\u306e\u5834\u5408\u3001pypy\u3092\u8a66\u3057\u3066\u307f\u308b","title":"\u8a08\u7b97\u91cf, \u9ad8\u901f\u5316"},{"location":"note/#_7","text":"from functools import lru_cache @lru_cache ( maxsize = 1000 ) def f ( n ): pass","title":"\u30e1\u30e2\u5316"},{"location":"note/#_8","text":"\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f1000\u56de\u307e\u3067\u3067\u3042\u308b \u518d\u5e30\u95a2\u6570\u3092\u7528\u3044\u3066\u3044\u308b\u3068\u304dRE\u306b\u306a\u3063\u305f\u5834\u5408\u306f\u4e0a\u9650\u3092\u4e0a\u3052\u3066\u307f\u308b import sys sys . setrecursionlimit ( 10 ** 6 )","title":"\u518d\u5e30\u56de\u6570\u306e\u4e0a\u9650"},{"location":"note/#_9","text":"\u30c7\u30d0\u30c3\u30b0\u6642\u306e print \u304c\u306a\u3044\u304b\u78ba\u8a8d\u3059\u308b Yes \u3068 YES \u306a\u3069\u51fa\u529b\u306b\u6c17\u3092\u3064\u3051\u308b \u51fa\u529b\u5f62\u5f0f\u306b\u3082\u6c17\u3092\u3064\u3051\u308b 1\u884c\u3067\u30b9\u30da\u30fc\u30b9\u533a\u5207\u308a\u3068\u304b\u3001\u8907\u6570\u884c\u3068\u304b","title":"\u305d\u306e\u4ed6\u6c17\u3092\u3064\u3051\u308b\u3053\u3068"},{"location":"todo/","text":"ToDo \u00b6 bit\u5168\u63a2\u7d22","title":"ToDo"},{"location":"todo/#todo","text":"bit\u5168\u63a2\u7d22","title":"ToDo"},{"location":"algorithms/bfs/","text":"\u5e45\u512a\u5148\u63a2\u7d22(BFS) \u00b6 \u8a08\u7b97\u91cf \u00b6 O(N+M) N\u306f\u30b0\u30e9\u30d5\u306e\u9802\u70b9\u306e\u6570, M\u306f\u8fba\u306e\u6570 \u30b3\u30fc\u30c9 \u00b6 Args: graph (List[int]): \u96a3\u63a5\u30ea\u30b9\u30c8 start (int): \u958b\u59cb\u30ce\u30fc\u30c9\u756a\u53f7 Returns: list: \u958b\u59cb\u30ce\u30fc\u30c9\u304b\u3089\u306e\u8ddd\u96e2 from collections import deque def bfs ( graph , start ): que = deque ([ start ]) dist = [ None ] * len ( graph ) dist [ start ] = 0 while len ( que ) != 0 : v = que . popleft () # do something with v for u in graph [ v ]: if dist [ u ] is None : que . append ( u ) dist [ u ] = dist [ v ] + 1 return dist","title":"\u5e45\u512a\u5148\u63a2\u7d22(BFS)"},{"location":"algorithms/bfs/#bfs","text":"","title":"\u5e45\u512a\u5148\u63a2\u7d22(BFS)"},{"location":"algorithms/bfs/#_1","text":"O(N+M) N\u306f\u30b0\u30e9\u30d5\u306e\u9802\u70b9\u306e\u6570, M\u306f\u8fba\u306e\u6570","title":"\u8a08\u7b97\u91cf"},{"location":"algorithms/bfs/#_2","text":"Args: graph (List[int]): \u96a3\u63a5\u30ea\u30b9\u30c8 start (int): \u958b\u59cb\u30ce\u30fc\u30c9\u756a\u53f7 Returns: list: \u958b\u59cb\u30ce\u30fc\u30c9\u304b\u3089\u306e\u8ddd\u96e2 from collections import deque def bfs ( graph , start ): que = deque ([ start ]) dist = [ None ] * len ( graph ) dist [ start ] = 0 while len ( que ) != 0 : v = que . popleft () # do something with v for u in graph [ v ]: if dist [ u ] is None : que . append ( u ) dist [ u ] = dist [ v ] + 1 return dist","title":"\u30b3\u30fc\u30c9"},{"location":"algorithms/dfs/","text":"\u6df1\u3055\u512a\u5148\u63a2\u7d22(DFS) \u00b6 \u8a08\u7b97\u91cf \u00b6 O(N+M) N\u306f\u30b0\u30e9\u30d5\u306e\u9802\u70b9\u306e\u6570, M\u306f\u8fba\u306e\u6570 \u4f7f\u3044\u65b9 \u00b6 graph (List[int]): \u96a3\u63a5\u30ea\u30b9\u30c8 start (int): \u958b\u59cb\u30ce\u30fc\u30c9\u756a\u53f7 \u518d\u5e30\u3042\u308a \u00b6 def dfs ( graph , visited , v ): visited [ v ] = True # do something with v for u in graph [ v ]: if visited [ u ]: continue dfs ( graph , visited , u ) visited = [ False ] * len ( graph ) dfs ( graph , visited , start ) \u518d\u5e30\u306a\u3057 \u00b6 def dfs ( graph , start ): stack = [ start ] visited = [ False ] * len ( graph ) visited [ start ] = True while len ( stack ) != 0 : v = stack . pop () print ( \"v = \" , v ) # do something with v for u in graph [ v ]: if visited : continue print ( \" u = \" , u ) stack . append ( u ) visited [ u ] = True","title":"\u6df1\u3055\u512a\u5148\u63a2\u7d22(DFS)"},{"location":"algorithms/dfs/#dfs","text":"","title":"\u6df1\u3055\u512a\u5148\u63a2\u7d22(DFS)"},{"location":"algorithms/dfs/#_1","text":"O(N+M) N\u306f\u30b0\u30e9\u30d5\u306e\u9802\u70b9\u306e\u6570, M\u306f\u8fba\u306e\u6570","title":"\u8a08\u7b97\u91cf"},{"location":"algorithms/dfs/#_2","text":"graph (List[int]): \u96a3\u63a5\u30ea\u30b9\u30c8 start (int): \u958b\u59cb\u30ce\u30fc\u30c9\u756a\u53f7","title":"\u4f7f\u3044\u65b9"},{"location":"algorithms/dfs/#_3","text":"def dfs ( graph , visited , v ): visited [ v ] = True # do something with v for u in graph [ v ]: if visited [ u ]: continue dfs ( graph , visited , u ) visited = [ False ] * len ( graph ) dfs ( graph , visited , start )","title":"\u518d\u5e30\u3042\u308a"},{"location":"algorithms/dfs/#_4","text":"def dfs ( graph , start ): stack = [ start ] visited = [ False ] * len ( graph ) visited [ start ] = True while len ( stack ) != 0 : v = stack . pop () print ( \"v = \" , v ) # do something with v for u in graph [ v ]: if visited : continue print ( \" u = \" , u ) stack . append ( u ) visited [ u ] = True","title":"\u518d\u5e30\u306a\u3057"},{"location":"algorithms/factor/","text":"\u7d04\u6570 \u00b6 \u7d04\u6570\u306e\u500b\u6570\u3092\u30ab\u30a6\u30f3\u30c8 \u00b6 \u8a08\u7b97\u91cf: O(\u221a(N)), N=10^12 \u3067 0.3sec def count_divisor ( n ): i , count = 1 , 0 while i * i <= n : if n % i == 0 : if i * i == n : count += 1 else : count += 2 i += 1 return coun Examples \u00b6 >>> count_divisor ( 12 ) 6","title":"\u7d04\u6570"},{"location":"algorithms/factor/#_1","text":"","title":"\u7d04\u6570"},{"location":"algorithms/factor/#_2","text":"\u8a08\u7b97\u91cf: O(\u221a(N)), N=10^12 \u3067 0.3sec def count_divisor ( n ): i , count = 1 , 0 while i * i <= n : if n % i == 0 : if i * i == n : count += 1 else : count += 2 i += 1 return coun","title":"\u7d04\u6570\u306e\u500b\u6570\u3092\u30ab\u30a6\u30f3\u30c8"},{"location":"algorithms/factor/#examples","text":">>> count_divisor ( 12 ) 6","title":"Examples"},{"location":"algorithms/union_find/","text":"Union Find \u00b6 class UnionFind ( object ): def __init__ ( self , n = 1 ): self . par = [ i for i in range ( n )] self . rank = [ 0 for _ in range ( n )] self . size = [ 1 for _ in range ( n )] def find ( self , x ): \"\"\"x \u304c\u5c5e\u3059\u308b\u30b0\u30eb\u30fc\u30d7\u3092\u63a2\u7d22\"\"\" if self . par [ x ] == x : return x else : self . par [ x ] = self . find ( self . par [ x ]) return self . par [ x ] def union ( self , x , y ): \"\"\"x \u3068 y \u306e\u30b0\u30eb\u30fc\u30d7\u3092\u7d50\u5408\"\"\" x = self . find ( x ) y = self . find ( y ) if x != y : if self . rank [ x ] < self . rank [ y ]: x , y = y , x if self . rank [ x ] == self . rank [ y ]: self . rank [ x ] += 1 self . par [ y ] = x self . size [ x ] += self . size [ y ] def is_same ( self , x , y ): \"\"\"x \u3068 y \u304c\u540c\u3058\u30b0\u30eb\u30fc\u30d7\u304b\u5426\u304b\"\"\" return self . find ( x ) == self . find ( y ) def get_size ( self , x ): \"\"\"x \u304c\u5c5e\u3059\u308b\u30b0\u30eb\u30fc\u30d7\u306e\u8981\u7d20\u6570\"\"\" x = self . find ( x ) return self . size [ x ]","title":"Union Find"},{"location":"algorithms/union_find/#union-find","text":"class UnionFind ( object ): def __init__ ( self , n = 1 ): self . par = [ i for i in range ( n )] self . rank = [ 0 for _ in range ( n )] self . size = [ 1 for _ in range ( n )] def find ( self , x ): \"\"\"x \u304c\u5c5e\u3059\u308b\u30b0\u30eb\u30fc\u30d7\u3092\u63a2\u7d22\"\"\" if self . par [ x ] == x : return x else : self . par [ x ] = self . find ( self . par [ x ]) return self . par [ x ] def union ( self , x , y ): \"\"\"x \u3068 y \u306e\u30b0\u30eb\u30fc\u30d7\u3092\u7d50\u5408\"\"\" x = self . find ( x ) y = self . find ( y ) if x != y : if self . rank [ x ] < self . rank [ y ]: x , y = y , x if self . rank [ x ] == self . rank [ y ]: self . rank [ x ] += 1 self . par [ y ] = x self . size [ x ] += self . size [ y ] def is_same ( self , x , y ): \"\"\"x \u3068 y \u304c\u540c\u3058\u30b0\u30eb\u30fc\u30d7\u304b\u5426\u304b\"\"\" return self . find ( x ) == self . find ( y ) def get_size ( self , x ): \"\"\"x \u304c\u5c5e\u3059\u308b\u30b0\u30eb\u30fc\u30d7\u306e\u8981\u7d20\u6570\"\"\" x = self . find ( x ) return self . size [ x ]","title":"Union Find"},{"location":"basic/combinatorics/","text":"\u7d44\u5408\u305b\u8ad6 \u00b6 \u9806\u5217 \u00b6 \u914d\u5217A\u304b\u3089k\u500b\u3092\u9078\u3076\u9806\u5217\u306e\u30ea\u30b9\u30c8 from itertools import permutations permutations ( A , k ) \u7d44\u5408\u305b \u00b6 \u914d\u5217A\u304b\u3089k\u500b\u3092\u9078\u3076\u7d44\u307f\u5408\u308f\u305b\u306e\u30ea\u30b9\u30c8 from itertools import combinations combinations ( A , k ) n\u500b\u304b\u3089k\u500b\u3092\u9078\u3076\u7d44\u307f\u5408\u308f\u305b\u6570\uff08nCk\uff09 scipy > 1.0.0 scipy.special n=10^4\u304f\u3089\u3044\u307e\u3067 from scipy.misc import comb comb ( n , k , exact = True ) \u968e\u4e57 \u00b6 # \u968e\u4e57 from math import factorial factorial ( x ) # \u968e\u4e57\u30c6\u30fc\u30d6\u30eb fac = [ 1 ] * N for i in range ( 1 , N ): fac [ i ] = ( fac [ i - 1 ] * i ) % mod # \u9006\u5143\u30c6\u30fc\u30d6\u30eb inv = [ 1 ] * N inv [ N - 1 ] = pow ( fac [ N - 1 ], mod - 2 , mod ) for i in range ( N - 1 , 0 , - 1 ): inv [ i - 1 ] = ( inv [ i ] * i ) % mod","title":"\u7d44\u5408\u305b\u8ad6"},{"location":"basic/combinatorics/#_1","text":"","title":"\u7d44\u5408\u305b\u8ad6"},{"location":"basic/combinatorics/#_2","text":"\u914d\u5217A\u304b\u3089k\u500b\u3092\u9078\u3076\u9806\u5217\u306e\u30ea\u30b9\u30c8 from itertools import permutations permutations ( A , k )","title":"\u9806\u5217"},{"location":"basic/combinatorics/#_3","text":"\u914d\u5217A\u304b\u3089k\u500b\u3092\u9078\u3076\u7d44\u307f\u5408\u308f\u305b\u306e\u30ea\u30b9\u30c8 from itertools import combinations combinations ( A , k ) n\u500b\u304b\u3089k\u500b\u3092\u9078\u3076\u7d44\u307f\u5408\u308f\u305b\u6570\uff08nCk\uff09 scipy > 1.0.0 scipy.special n=10^4\u304f\u3089\u3044\u307e\u3067 from scipy.misc import comb comb ( n , k , exact = True )","title":"\u7d44\u5408\u305b"},{"location":"basic/combinatorics/#_4","text":"# \u968e\u4e57 from math import factorial factorial ( x ) # \u968e\u4e57\u30c6\u30fc\u30d6\u30eb fac = [ 1 ] * N for i in range ( 1 , N ): fac [ i ] = ( fac [ i - 1 ] * i ) % mod # \u9006\u5143\u30c6\u30fc\u30d6\u30eb inv = [ 1 ] * N inv [ N - 1 ] = pow ( fac [ N - 1 ], mod - 2 , mod ) for i in range ( N - 1 , 0 , - 1 ): inv [ i - 1 ] = ( inv [ i ] * i ) % mod","title":"\u968e\u4e57"},{"location":"basic/data_structures/","text":"\u30c7\u30fc\u30bf\u69cb\u9020 \u00b6 \u30ea\u30b9\u30c8 \u00b6 \u30ea\u30b9\u30c8\u306e\u521d\u671f\u5316 \u00b6 # x[N][M] x = [[ None ] * M for _ in range ( N )] Note \u591a\u91cd\u30ea\u30b9\u30c8\u306f\u5185\u5305\u8868\u8a18\u3067\u521d\u671f\u5316\u3059\u308b \u591a\u91cd\u30ea\u30b9\u30c8\u306e\u30eb\u30fc\u30d7 \u00b6 product \u3092\u4f7f\u3046\u3068\u77ed\u304f\u66f8\u3051\u308b from itertools import product for p in product (): pass >>> for p in product ([ 0 , 1 ], repeat = 3 ): ... print ( p ) ... ( 0 , 0 , 0 ) ( 0 , 0 , 1 ) ( 0 , 1 , 0 ) ( 0 , 1 , 1 ) ( 1 , 0 , 0 ) ( 1 , 0 , 1 ) ( 1 , 1 , 0 ) ( 1 , 1 , 1 ) 2\u6b21\u5143\u30ea\u30b9\u30c8\u3092flatten\uff08\u4e00\u6b21\u5143\uff09\u306b\u5909\u63db\u3059\u308b \u00b6 [ x for l in A for x in l ] >>> A = [[ 0 , 1 ], [ 2 , 3 ]] >>> [ x for l in A for x in l ] [ 0 , 1 , 2 , 3 ] \u30ea\u30b9\u30c8\u306e\u51fa\u529b \u00b6 print ( ' ' . join ( map ( str , ans ))) >>> ans = [ 1 , 2 , 3 ] >>> print ( ' ' . join ( map ( str , ans ))) 1 2 3 \u8f9e\u66f8 \u00b6 \u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3092\u6301\u3064\u8f9e\u66f8\u306e\u521d\u671f\u5316 \u00b6 from collections import defaultdict \u8f9e\u66f8\u306e\u30bd\u30fc\u30c8 \u00b6 itemgetter \u3092\u4f7f\u7528\u3059\u308b\u307b\u3046\u304clamnda\u3088\u308a\u9ad8\u901f from operator import itemgetter sorted ( x , key = itemgetter ( 0 )) >>> x = { \"a\" : 2 , \"b\" : 1 } # key >>> sorted ( x , key = itemgetter ( 0 )) [( 'a' , 2 ), ( 'b' , 1 )] # value >>> sorted ( x , key = itemgetter ( 1 )) [( 'b' , 1 ), ( 'a' , 2 )] \u30ab\u30a6\u30f3\u30bf\u30fc \u00b6 from collections import Counter \u96c6\u5408 \u00b6 x in set Note \u91cd\u8907\u3092\u542b\u307e\u306a\u3044\u8981\u7d20\u306e\u63a2\u7d22\u306e\u5834\u5408\u306f set \u3092\u4f7f\u3046 list : O(N) set : O(1) \u30ad\u30e5\u30fc \u00b6 from collections import deque que = deque () \u512a\u5148\u5ea6\u4ed8\u304d\u30ad\u30e5\u30fc \u00b6 heappush: O(logN) heappop: O(1) \u6700\u5c0f\u30d2\u30fc\u30d7 \u00b6 from heapq import heappop , heappush que = [] heappush ( que , v ) v = heappop ( que ) \u6700\u5927\u30d2\u30fc\u30d7 \u00b6 from heapq import heappop , heappush que = [] heappush ( que , v * - 1 ) v = heappop ( que ) * - 1","title":"\u30c7\u30fc\u30bf\u69cb\u9020"},{"location":"basic/data_structures/#_1","text":"","title":"\u30c7\u30fc\u30bf\u69cb\u9020"},{"location":"basic/data_structures/#_2","text":"","title":"\u30ea\u30b9\u30c8"},{"location":"basic/data_structures/#_3","text":"# x[N][M] x = [[ None ] * M for _ in range ( N )] Note \u591a\u91cd\u30ea\u30b9\u30c8\u306f\u5185\u5305\u8868\u8a18\u3067\u521d\u671f\u5316\u3059\u308b","title":"\u30ea\u30b9\u30c8\u306e\u521d\u671f\u5316"},{"location":"basic/data_structures/#_4","text":"product \u3092\u4f7f\u3046\u3068\u77ed\u304f\u66f8\u3051\u308b from itertools import product for p in product (): pass >>> for p in product ([ 0 , 1 ], repeat = 3 ): ... print ( p ) ... ( 0 , 0 , 0 ) ( 0 , 0 , 1 ) ( 0 , 1 , 0 ) ( 0 , 1 , 1 ) ( 1 , 0 , 0 ) ( 1 , 0 , 1 ) ( 1 , 1 , 0 ) ( 1 , 1 , 1 )","title":"\u591a\u91cd\u30ea\u30b9\u30c8\u306e\u30eb\u30fc\u30d7"},{"location":"basic/data_structures/#2flatten","text":"[ x for l in A for x in l ] >>> A = [[ 0 , 1 ], [ 2 , 3 ]] >>> [ x for l in A for x in l ] [ 0 , 1 , 2 , 3 ]","title":"2\u6b21\u5143\u30ea\u30b9\u30c8\u3092flatten\uff08\u4e00\u6b21\u5143\uff09\u306b\u5909\u63db\u3059\u308b"},{"location":"basic/data_structures/#_5","text":"print ( ' ' . join ( map ( str , ans ))) >>> ans = [ 1 , 2 , 3 ] >>> print ( ' ' . join ( map ( str , ans ))) 1 2 3","title":"\u30ea\u30b9\u30c8\u306e\u51fa\u529b"},{"location":"basic/data_structures/#_6","text":"","title":"\u8f9e\u66f8"},{"location":"basic/data_structures/#_7","text":"from collections import defaultdict","title":"\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3092\u6301\u3064\u8f9e\u66f8\u306e\u521d\u671f\u5316"},{"location":"basic/data_structures/#_8","text":"itemgetter \u3092\u4f7f\u7528\u3059\u308b\u307b\u3046\u304clamnda\u3088\u308a\u9ad8\u901f from operator import itemgetter sorted ( x , key = itemgetter ( 0 )) >>> x = { \"a\" : 2 , \"b\" : 1 } # key >>> sorted ( x , key = itemgetter ( 0 )) [( 'a' , 2 ), ( 'b' , 1 )] # value >>> sorted ( x , key = itemgetter ( 1 )) [( 'b' , 1 ), ( 'a' , 2 )]","title":"\u8f9e\u66f8\u306e\u30bd\u30fc\u30c8"},{"location":"basic/data_structures/#_9","text":"from collections import Counter","title":"\u30ab\u30a6\u30f3\u30bf\u30fc"},{"location":"basic/data_structures/#_10","text":"x in set Note \u91cd\u8907\u3092\u542b\u307e\u306a\u3044\u8981\u7d20\u306e\u63a2\u7d22\u306e\u5834\u5408\u306f set \u3092\u4f7f\u3046 list : O(N) set : O(1)","title":"\u96c6\u5408"},{"location":"basic/data_structures/#_11","text":"from collections import deque que = deque ()","title":"\u30ad\u30e5\u30fc"},{"location":"basic/data_structures/#_12","text":"heappush: O(logN) heappop: O(1)","title":"\u512a\u5148\u5ea6\u4ed8\u304d\u30ad\u30e5\u30fc"},{"location":"basic/data_structures/#_13","text":"from heapq import heappop , heappush que = [] heappush ( que , v ) v = heappop ( que )","title":"\u6700\u5c0f\u30d2\u30fc\u30d7"},{"location":"basic/data_structures/#_14","text":"from heapq import heappop , heappush que = [] heappush ( que , v * - 1 ) v = heappop ( que ) * - 1","title":"\u6700\u5927\u30d2\u30fc\u30d7"},{"location":"basic/stdin/","text":"\u6a19\u6e96\u5165\u529b \u00b6 \u3088\u304f\u4f7f\u3046\u6a19\u6e96\u5165\u529b \u00b6 S = input () N = int ( input ()) N , K = map ( int , input () . split ()) A = [ int ( x ) for x in input () . split ()] A = [ int ( input ()) for _ in range ( N )] S = [ list ( input ()) for _ in range ( H )] A = [[ int ( x ) for x in input () . split ()] for _ in range ( H )] a , b = [ None ] * N , [ None ] * N for i in range ( N ): a [ i ], b [ i ] = map ( int , input () . split ()) \u6a19\u6e96\u5165\u529b\u306e\u9ad8\u901f\u5316 \u00b6 import sys input = sys . stdin . readline Note 10\u500d\u4ee5\u4e0a\u9ad8\u901f\u5316\u3067\u304d\u308b\u306e\u3067\u3001 10^6 10^6 \u3092\u8d85\u3048\u308b\u5834\u5408\u306f\u4f7f\u3046\u3053\u3068 \u51e6\u7406\u901f\u5ea6\u306e\u6bd4\u8f03 \u00b6 \u30c7\u30fc\u30bf\u6570\u304c 10^6 10^6 \u306e\u3068\u304d\u306e\u51e6\u7406\u901f\u5ea6 \u51fa\u5c55: Python\u306e\u77e5\u3063\u3066\u304a\u304f\u3068\u826f\u3044\u7d30\u304b\u3044\u51e6\u7406\u901f\u5ea6\u306e\u9055\u30448\u500b","title":"\u6a19\u6e96\u5165\u529b"},{"location":"basic/stdin/#_1","text":"","title":"\u6a19\u6e96\u5165\u529b"},{"location":"basic/stdin/#_2","text":"S = input () N = int ( input ()) N , K = map ( int , input () . split ()) A = [ int ( x ) for x in input () . split ()] A = [ int ( input ()) for _ in range ( N )] S = [ list ( input ()) for _ in range ( H )] A = [[ int ( x ) for x in input () . split ()] for _ in range ( H )] a , b = [ None ] * N , [ None ] * N for i in range ( N ): a [ i ], b [ i ] = map ( int , input () . split ())","title":"\u3088\u304f\u4f7f\u3046\u6a19\u6e96\u5165\u529b"},{"location":"basic/stdin/#_3","text":"import sys input = sys . stdin . readline Note 10\u500d\u4ee5\u4e0a\u9ad8\u901f\u5316\u3067\u304d\u308b\u306e\u3067\u3001 10^6 10^6 \u3092\u8d85\u3048\u308b\u5834\u5408\u306f\u4f7f\u3046\u3053\u3068","title":"\u6a19\u6e96\u5165\u529b\u306e\u9ad8\u901f\u5316"},{"location":"basic/stdin/#_4","text":"\u30c7\u30fc\u30bf\u6570\u304c 10^6 10^6 \u306e\u3068\u304d\u306e\u51e6\u7406\u901f\u5ea6 \u51fa\u5c55: Python\u306e\u77e5\u3063\u3066\u304a\u304f\u3068\u826f\u3044\u7d30\u304b\u3044\u51e6\u7406\u901f\u5ea6\u306e\u9055\u30448\u500b","title":"\u51e6\u7406\u901f\u5ea6\u306e\u6bd4\u8f03"}]}